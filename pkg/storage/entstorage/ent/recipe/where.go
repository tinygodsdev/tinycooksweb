// Code generated by ent, DO NOT EDIT.

package recipe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldDescription, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldText, v))
}

// Servings applies equality check predicate on the "servings" field. It's identical to ServingsEQ.
func Servings(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldServings, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldEQ(FieldTime, vc))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldUpdateTime, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v Locale) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldLocale, v))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v Locale) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldLocale, v))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...Locale) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldLocale, vs...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...Locale) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldLocale, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldDescription, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(sql.FieldContainsFold(FieldText, v))
}

// ServingsEQ applies the EQ predicate on the "servings" field.
func ServingsEQ(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldEQ(FieldServings, v))
}

// ServingsNEQ applies the NEQ predicate on the "servings" field.
func ServingsNEQ(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldNEQ(FieldServings, v))
}

// ServingsIn applies the In predicate on the "servings" field.
func ServingsIn(vs ...int) predicate.Recipe {
	return predicate.Recipe(sql.FieldIn(FieldServings, vs...))
}

// ServingsNotIn applies the NotIn predicate on the "servings" field.
func ServingsNotIn(vs ...int) predicate.Recipe {
	return predicate.Recipe(sql.FieldNotIn(FieldServings, vs...))
}

// ServingsGT applies the GT predicate on the "servings" field.
func ServingsGT(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldGT(FieldServings, v))
}

// ServingsGTE applies the GTE predicate on the "servings" field.
func ServingsGTE(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldGTE(FieldServings, v))
}

// ServingsLT applies the LT predicate on the "servings" field.
func ServingsLT(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldLT(FieldServings, v))
}

// ServingsLTE applies the LTE predicate on the "servings" field.
func ServingsLTE(v int) predicate.Recipe {
	return predicate.Recipe(sql.FieldLTE(FieldServings, v))
}

// ServingsIsNil applies the IsNil predicate on the "servings" field.
func ServingsIsNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldIsNull(FieldServings))
}

// ServingsNotNil applies the NotNil predicate on the "servings" field.
func ServingsNotNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldNotNull(FieldServings))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldEQ(FieldTime, vc))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldNEQ(FieldTime, vc))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Duration) predicate.Recipe {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.Recipe(sql.FieldIn(FieldTime, v...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Duration) predicate.Recipe {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.Recipe(sql.FieldNotIn(FieldTime, v...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldGT(FieldTime, vc))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldGTE(FieldTime, vc))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldLT(FieldTime, vc))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Duration) predicate.Recipe {
	vc := int64(v)
	return predicate.Recipe(sql.FieldLTE(FieldTime, vc))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.Recipe {
	return predicate.Recipe(sql.FieldNotNull(FieldTime))
}

// HasRequiredProducts applies the HasEdge predicate on the "required_products" edge.
func HasRequiredProducts() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequiredProductsTable, RequiredProductsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequiredProductsWith applies the HasEdge predicate on the "required_products" edge with a given conditions (other predicates).
func HasRequiredProductsWith(preds ...predicate.Product) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newRequiredProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstructions applies the HasEdge predicate on the "instructions" edge.
func HasInstructions() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstructionsTable, InstructionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstructionsWith applies the HasEdge predicate on the "instructions" edge with a given conditions (other predicates).
func HasInstructionsWith(preds ...predicate.Instruction) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newInstructionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EquipmentTable, EquipmentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIdeas applies the HasEdge predicate on the "ideas" edge.
func HasIdeas() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IdeasTable, IdeasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIdeasWith applies the HasEdge predicate on the "ideas" edge with a given conditions (other predicates).
func HasIdeasWith(preds ...predicate.Idea) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newIdeasStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSources applies the HasEdge predicate on the "sources" edge.
func HasSources() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SourcesTable, SourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourcesWith applies the HasEdge predicate on the "sources" edge with a given conditions (other predicates).
func HasSourcesWith(preds ...predicate.Source) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newSourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNutrition applies the HasEdge predicate on the "nutrition" edge.
func HasNutrition() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NutritionTable, NutritionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNutritionWith applies the HasEdge predicate on the "nutrition" edge with a given conditions (other predicates).
func HasNutritionWith(preds ...predicate.Nutrition) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newNutritionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIngredients applies the HasEdge predicate on the "ingredients" edge.
func HasIngredients() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, IngredientsTable, IngredientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIngredientsWith applies the HasEdge predicate on the "ingredients" edge with a given conditions (other predicates).
func HasIngredientsWith(preds ...predicate.Ingredient) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := newIngredientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(sql.NotPredicates(p))
}
