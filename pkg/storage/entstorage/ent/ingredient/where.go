// Code generated by ent, DO NOT EDIT.

package ingredient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUpdateTime, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldQuantity, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUnit, v))
}

// RecipeID applies equality check predicate on the "recipe_id" field. It's identical to RecipeIDEQ.
func RecipeID(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldRecipeID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldProductID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldUpdateTime, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldQuantity, v))
}

// QuantityContains applies the Contains predicate on the "quantity" field.
func QuantityContains(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContains(FieldQuantity, v))
}

// QuantityHasPrefix applies the HasPrefix predicate on the "quantity" field.
func QuantityHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasPrefix(FieldQuantity, v))
}

// QuantityHasSuffix applies the HasSuffix predicate on the "quantity" field.
func QuantityHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasSuffix(FieldQuantity, v))
}

// QuantityIsNil applies the IsNil predicate on the "quantity" field.
func QuantityIsNil() predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIsNull(FieldQuantity))
}

// QuantityNotNil applies the NotNil predicate on the "quantity" field.
func QuantityNotNil() predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotNull(FieldQuantity))
}

// QuantityEqualFold applies the EqualFold predicate on the "quantity" field.
func QuantityEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEqualFold(FieldQuantity, v))
}

// QuantityContainsFold applies the ContainsFold predicate on the "quantity" field.
func QuantityContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContainsFold(FieldQuantity, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIsNull(FieldUnit))
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotNull(FieldUnit))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldContainsFold(FieldUnit, v))
}

// RecipeIDEQ applies the EQ predicate on the "recipe_id" field.
func RecipeIDEQ(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldRecipeID, v))
}

// RecipeIDNEQ applies the NEQ predicate on the "recipe_id" field.
func RecipeIDNEQ(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldRecipeID, v))
}

// RecipeIDIn applies the In predicate on the "recipe_id" field.
func RecipeIDIn(vs ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldRecipeID, vs...))
}

// RecipeIDNotIn applies the NotIn predicate on the "recipe_id" field.
func RecipeIDNotIn(vs ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldRecipeID, vs...))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...uuid.UUID) predicate.Ingredient {
	return predicate.Ingredient(sql.FieldNotIn(FieldProductID, vs...))
}

// HasRecipe applies the HasEdge predicate on the "recipe" edge.
func HasRecipe() predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RecipeTable, RecipeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipeWith applies the HasEdge predicate on the "recipe" edge with a given conditions (other predicates).
func HasRecipeWith(preds ...predicate.Recipe) predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := newRecipeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Ingredient {
	return predicate.Ingredient(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(sql.NotPredicates(p))
}
