// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/ingredient"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/product"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// IngredientCreate is the builder for creating a Ingredient entity.
type IngredientCreate struct {
	config
	mutation *IngredientMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *IngredientCreate) SetCreateTime(t time.Time) *IngredientCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *IngredientCreate) SetNillableCreateTime(t *time.Time) *IngredientCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *IngredientCreate) SetUpdateTime(t time.Time) *IngredientCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *IngredientCreate) SetNillableUpdateTime(t *time.Time) *IngredientCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetQuantity sets the "quantity" field.
func (ic *IngredientCreate) SetQuantity(s string) *IngredientCreate {
	ic.mutation.SetQuantity(s)
	return ic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ic *IngredientCreate) SetNillableQuantity(s *string) *IngredientCreate {
	if s != nil {
		ic.SetQuantity(*s)
	}
	return ic
}

// SetUnit sets the "unit" field.
func (ic *IngredientCreate) SetUnit(s string) *IngredientCreate {
	ic.mutation.SetUnit(s)
	return ic
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (ic *IngredientCreate) SetNillableUnit(s *string) *IngredientCreate {
	if s != nil {
		ic.SetUnit(*s)
	}
	return ic
}

// SetRecipeID sets the "recipe_id" field.
func (ic *IngredientCreate) SetRecipeID(u uuid.UUID) *IngredientCreate {
	ic.mutation.SetRecipeID(u)
	return ic
}

// SetProductID sets the "product_id" field.
func (ic *IngredientCreate) SetProductID(u uuid.UUID) *IngredientCreate {
	ic.mutation.SetProductID(u)
	return ic
}

// SetID sets the "id" field.
func (ic *IngredientCreate) SetID(u uuid.UUID) *IngredientCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IngredientCreate) SetNillableID(u *uuid.UUID) *IngredientCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (ic *IngredientCreate) SetRecipe(r *Recipe) *IngredientCreate {
	return ic.SetRecipeID(r.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (ic *IngredientCreate) SetProduct(p *Product) *IngredientCreate {
	return ic.SetProductID(p.ID)
}

// Mutation returns the IngredientMutation object of the builder.
func (ic *IngredientCreate) Mutation() *IngredientMutation {
	return ic.mutation
}

// Save creates the Ingredient in the database.
func (ic *IngredientCreate) Save(ctx context.Context) (*Ingredient, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngredientCreate) SaveX(ctx context.Context) *Ingredient {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngredientCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngredientCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IngredientCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := ingredient.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := ingredient.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := ingredient.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngredientCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Ingredient.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Ingredient.update_time"`)}
	}
	if _, ok := ic.mutation.RecipeID(); !ok {
		return &ValidationError{Name: "recipe_id", err: errors.New(`ent: missing required field "Ingredient.recipe_id"`)}
	}
	if _, ok := ic.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Ingredient.product_id"`)}
	}
	if len(ic.mutation.RecipeIDs()) == 0 {
		return &ValidationError{Name: "recipe", err: errors.New(`ent: missing required edge "Ingredient.recipe"`)}
	}
	if len(ic.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "Ingredient.product"`)}
	}
	return nil
}

func (ic *IngredientCreate) sqlSave(ctx context.Context) (*Ingredient, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IngredientCreate) createSpec() (*Ingredient, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingredient{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(ingredient.Table, sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.SetField(ingredient.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.SetField(ingredient.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Quantity(); ok {
		_spec.SetField(ingredient.FieldQuantity, field.TypeString, value)
		_node.Quantity = value
	}
	if value, ok := ic.mutation.Unit(); ok {
		_spec.SetField(ingredient.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if nodes := ic.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ingredient.RecipeTable,
			Columns: []string{ingredient.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RecipeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ingredient.ProductTable,
			Columns: []string{ingredient.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IngredientCreateBulk is the builder for creating many Ingredient entities in bulk.
type IngredientCreateBulk struct {
	config
	err      error
	builders []*IngredientCreate
}

// Save creates the Ingredient entities in the database.
func (icb *IngredientCreateBulk) Save(ctx context.Context) ([]*Ingredient, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingredient, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngredientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngredientCreateBulk) SaveX(ctx context.Context) []*Ingredient {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngredientCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngredientCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
