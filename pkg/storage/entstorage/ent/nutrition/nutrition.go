// Code generated by ent, DO NOT EDIT.

package nutrition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the nutrition type in the database.
	Label = "nutrition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCalories holds the string denoting the calories field in the database.
	FieldCalories = "calories"
	// FieldFat holds the string denoting the fat field in the database.
	FieldFat = "fat"
	// FieldCarbs holds the string denoting the carbs field in the database.
	FieldCarbs = "carbs"
	// FieldProtein holds the string denoting the protein field in the database.
	FieldProtein = "protein"
	// FieldPrecision holds the string denoting the precision field in the database.
	FieldPrecision = "precision"
	// FieldBenefits holds the string denoting the benefits field in the database.
	FieldBenefits = "benefits"
	// EdgeRecipe holds the string denoting the recipe edge name in mutations.
	EdgeRecipe = "recipe"
	// Table holds the table name of the nutrition in the database.
	Table = "nutritions"
	// RecipeTable is the table that holds the recipe relation/edge.
	RecipeTable = "nutritions"
	// RecipeInverseTable is the table name for the Recipe entity.
	// It exists in this package in order to avoid circular dependency with the "recipe" package.
	RecipeInverseTable = "recipes"
	// RecipeColumn is the table column denoting the recipe relation/edge.
	RecipeColumn = "recipe_nutrition"
)

// Columns holds all SQL columns for nutrition fields.
var Columns = []string{
	FieldID,
	FieldCalories,
	FieldFat,
	FieldCarbs,
	FieldProtein,
	FieldPrecision,
	FieldBenefits,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nutritions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"recipe_nutrition",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Nutrition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCalories orders the results by the calories field.
func ByCalories(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalories, opts...).ToFunc()
}

// ByFat orders the results by the fat field.
func ByFat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFat, opts...).ToFunc()
}

// ByCarbs orders the results by the carbs field.
func ByCarbs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarbs, opts...).ToFunc()
}

// ByProtein orders the results by the protein field.
func ByProtein(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtein, opts...).ToFunc()
}

// ByPrecision orders the results by the precision field.
func ByPrecision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrecision, opts...).ToFunc()
}

// ByRecipeField orders the results by recipe field.
func ByRecipeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipeStep(), sql.OrderByField(field, opts...))
	}
}
func newRecipeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, RecipeTable, RecipeColumn),
	)
}
