// Code generated by ent, DO NOT EDIT.

package nutrition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldID, id))
}

// Calories applies equality check predicate on the "calories" field. It's identical to CaloriesEQ.
func Calories(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldCalories, v))
}

// Fat applies equality check predicate on the "fat" field. It's identical to FatEQ.
func Fat(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldFat, v))
}

// Carbs applies equality check predicate on the "carbs" field. It's identical to CarbsEQ.
func Carbs(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldCarbs, v))
}

// Protein applies equality check predicate on the "protein" field. It's identical to ProteinEQ.
func Protein(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldProtein, v))
}

// Precision applies equality check predicate on the "precision" field. It's identical to PrecisionEQ.
func Precision(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldPrecision, v))
}

// CaloriesEQ applies the EQ predicate on the "calories" field.
func CaloriesEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldCalories, v))
}

// CaloriesNEQ applies the NEQ predicate on the "calories" field.
func CaloriesNEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldCalories, v))
}

// CaloriesIn applies the In predicate on the "calories" field.
func CaloriesIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldCalories, vs...))
}

// CaloriesNotIn applies the NotIn predicate on the "calories" field.
func CaloriesNotIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldCalories, vs...))
}

// CaloriesGT applies the GT predicate on the "calories" field.
func CaloriesGT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldCalories, v))
}

// CaloriesGTE applies the GTE predicate on the "calories" field.
func CaloriesGTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldCalories, v))
}

// CaloriesLT applies the LT predicate on the "calories" field.
func CaloriesLT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldCalories, v))
}

// CaloriesLTE applies the LTE predicate on the "calories" field.
func CaloriesLTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldCalories, v))
}

// CaloriesIsNil applies the IsNil predicate on the "calories" field.
func CaloriesIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldCalories))
}

// CaloriesNotNil applies the NotNil predicate on the "calories" field.
func CaloriesNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldCalories))
}

// FatEQ applies the EQ predicate on the "fat" field.
func FatEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldFat, v))
}

// FatNEQ applies the NEQ predicate on the "fat" field.
func FatNEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldFat, v))
}

// FatIn applies the In predicate on the "fat" field.
func FatIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldFat, vs...))
}

// FatNotIn applies the NotIn predicate on the "fat" field.
func FatNotIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldFat, vs...))
}

// FatGT applies the GT predicate on the "fat" field.
func FatGT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldFat, v))
}

// FatGTE applies the GTE predicate on the "fat" field.
func FatGTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldFat, v))
}

// FatLT applies the LT predicate on the "fat" field.
func FatLT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldFat, v))
}

// FatLTE applies the LTE predicate on the "fat" field.
func FatLTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldFat, v))
}

// FatIsNil applies the IsNil predicate on the "fat" field.
func FatIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldFat))
}

// FatNotNil applies the NotNil predicate on the "fat" field.
func FatNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldFat))
}

// CarbsEQ applies the EQ predicate on the "carbs" field.
func CarbsEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldCarbs, v))
}

// CarbsNEQ applies the NEQ predicate on the "carbs" field.
func CarbsNEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldCarbs, v))
}

// CarbsIn applies the In predicate on the "carbs" field.
func CarbsIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldCarbs, vs...))
}

// CarbsNotIn applies the NotIn predicate on the "carbs" field.
func CarbsNotIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldCarbs, vs...))
}

// CarbsGT applies the GT predicate on the "carbs" field.
func CarbsGT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldCarbs, v))
}

// CarbsGTE applies the GTE predicate on the "carbs" field.
func CarbsGTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldCarbs, v))
}

// CarbsLT applies the LT predicate on the "carbs" field.
func CarbsLT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldCarbs, v))
}

// CarbsLTE applies the LTE predicate on the "carbs" field.
func CarbsLTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldCarbs, v))
}

// CarbsIsNil applies the IsNil predicate on the "carbs" field.
func CarbsIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldCarbs))
}

// CarbsNotNil applies the NotNil predicate on the "carbs" field.
func CarbsNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldCarbs))
}

// ProteinEQ applies the EQ predicate on the "protein" field.
func ProteinEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldProtein, v))
}

// ProteinNEQ applies the NEQ predicate on the "protein" field.
func ProteinNEQ(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldProtein, v))
}

// ProteinIn applies the In predicate on the "protein" field.
func ProteinIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldProtein, vs...))
}

// ProteinNotIn applies the NotIn predicate on the "protein" field.
func ProteinNotIn(vs ...int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldProtein, vs...))
}

// ProteinGT applies the GT predicate on the "protein" field.
func ProteinGT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldProtein, v))
}

// ProteinGTE applies the GTE predicate on the "protein" field.
func ProteinGTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldProtein, v))
}

// ProteinLT applies the LT predicate on the "protein" field.
func ProteinLT(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldProtein, v))
}

// ProteinLTE applies the LTE predicate on the "protein" field.
func ProteinLTE(v int) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldProtein, v))
}

// ProteinIsNil applies the IsNil predicate on the "protein" field.
func ProteinIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldProtein))
}

// ProteinNotNil applies the NotNil predicate on the "protein" field.
func ProteinNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldProtein))
}

// PrecisionEQ applies the EQ predicate on the "precision" field.
func PrecisionEQ(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEQ(FieldPrecision, v))
}

// PrecisionNEQ applies the NEQ predicate on the "precision" field.
func PrecisionNEQ(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNEQ(FieldPrecision, v))
}

// PrecisionIn applies the In predicate on the "precision" field.
func PrecisionIn(vs ...string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIn(FieldPrecision, vs...))
}

// PrecisionNotIn applies the NotIn predicate on the "precision" field.
func PrecisionNotIn(vs ...string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotIn(FieldPrecision, vs...))
}

// PrecisionGT applies the GT predicate on the "precision" field.
func PrecisionGT(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGT(FieldPrecision, v))
}

// PrecisionGTE applies the GTE predicate on the "precision" field.
func PrecisionGTE(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldGTE(FieldPrecision, v))
}

// PrecisionLT applies the LT predicate on the "precision" field.
func PrecisionLT(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLT(FieldPrecision, v))
}

// PrecisionLTE applies the LTE predicate on the "precision" field.
func PrecisionLTE(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldLTE(FieldPrecision, v))
}

// PrecisionContains applies the Contains predicate on the "precision" field.
func PrecisionContains(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldContains(FieldPrecision, v))
}

// PrecisionHasPrefix applies the HasPrefix predicate on the "precision" field.
func PrecisionHasPrefix(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldHasPrefix(FieldPrecision, v))
}

// PrecisionHasSuffix applies the HasSuffix predicate on the "precision" field.
func PrecisionHasSuffix(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldHasSuffix(FieldPrecision, v))
}

// PrecisionIsNil applies the IsNil predicate on the "precision" field.
func PrecisionIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldPrecision))
}

// PrecisionNotNil applies the NotNil predicate on the "precision" field.
func PrecisionNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldPrecision))
}

// PrecisionEqualFold applies the EqualFold predicate on the "precision" field.
func PrecisionEqualFold(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldEqualFold(FieldPrecision, v))
}

// PrecisionContainsFold applies the ContainsFold predicate on the "precision" field.
func PrecisionContainsFold(v string) predicate.Nutrition {
	return predicate.Nutrition(sql.FieldContainsFold(FieldPrecision, v))
}

// BenefitsIsNil applies the IsNil predicate on the "benefits" field.
func BenefitsIsNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldIsNull(FieldBenefits))
}

// BenefitsNotNil applies the NotNil predicate on the "benefits" field.
func BenefitsNotNil() predicate.Nutrition {
	return predicate.Nutrition(sql.FieldNotNull(FieldBenefits))
}

// HasRecipe applies the HasEdge predicate on the "recipe" edge.
func HasRecipe() predicate.Nutrition {
	return predicate.Nutrition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RecipeTable, RecipeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipeWith applies the HasEdge predicate on the "recipe" edge with a given conditions (other predicates).
func HasRecipeWith(preds ...predicate.Recipe) predicate.Nutrition {
	return predicate.Nutrition(func(s *sql.Selector) {
		step := newRecipeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nutrition) predicate.Nutrition {
	return predicate.Nutrition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nutrition) predicate.Nutrition {
	return predicate.Nutrition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nutrition) predicate.Nutrition {
	return predicate.Nutrition(sql.NotPredicates(p))
}
