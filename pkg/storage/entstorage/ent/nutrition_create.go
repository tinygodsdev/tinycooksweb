// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// NutritionCreate is the builder for creating a Nutrition entity.
type NutritionCreate struct {
	config
	mutation *NutritionMutation
	hooks    []Hook
}

// SetCalories sets the "calories" field.
func (nc *NutritionCreate) SetCalories(i int) *NutritionCreate {
	nc.mutation.SetCalories(i)
	return nc
}

// SetNillableCalories sets the "calories" field if the given value is not nil.
func (nc *NutritionCreate) SetNillableCalories(i *int) *NutritionCreate {
	if i != nil {
		nc.SetCalories(*i)
	}
	return nc
}

// SetFat sets the "fat" field.
func (nc *NutritionCreate) SetFat(i int) *NutritionCreate {
	nc.mutation.SetFat(i)
	return nc
}

// SetNillableFat sets the "fat" field if the given value is not nil.
func (nc *NutritionCreate) SetNillableFat(i *int) *NutritionCreate {
	if i != nil {
		nc.SetFat(*i)
	}
	return nc
}

// SetCarbs sets the "carbs" field.
func (nc *NutritionCreate) SetCarbs(i int) *NutritionCreate {
	nc.mutation.SetCarbs(i)
	return nc
}

// SetNillableCarbs sets the "carbs" field if the given value is not nil.
func (nc *NutritionCreate) SetNillableCarbs(i *int) *NutritionCreate {
	if i != nil {
		nc.SetCarbs(*i)
	}
	return nc
}

// SetProtein sets the "protein" field.
func (nc *NutritionCreate) SetProtein(i int) *NutritionCreate {
	nc.mutation.SetProtein(i)
	return nc
}

// SetNillableProtein sets the "protein" field if the given value is not nil.
func (nc *NutritionCreate) SetNillableProtein(i *int) *NutritionCreate {
	if i != nil {
		nc.SetProtein(*i)
	}
	return nc
}

// SetPrecision sets the "precision" field.
func (nc *NutritionCreate) SetPrecision(s string) *NutritionCreate {
	nc.mutation.SetPrecision(s)
	return nc
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (nc *NutritionCreate) SetNillablePrecision(s *string) *NutritionCreate {
	if s != nil {
		nc.SetPrecision(*s)
	}
	return nc
}

// SetBenefits sets the "benefits" field.
func (nc *NutritionCreate) SetBenefits(s []string) *NutritionCreate {
	nc.mutation.SetBenefits(s)
	return nc
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (nc *NutritionCreate) SetRecipeID(id uuid.UUID) *NutritionCreate {
	nc.mutation.SetRecipeID(id)
	return nc
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (nc *NutritionCreate) SetNillableRecipeID(id *uuid.UUID) *NutritionCreate {
	if id != nil {
		nc = nc.SetRecipeID(*id)
	}
	return nc
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (nc *NutritionCreate) SetRecipe(r *Recipe) *NutritionCreate {
	return nc.SetRecipeID(r.ID)
}

// Mutation returns the NutritionMutation object of the builder.
func (nc *NutritionCreate) Mutation() *NutritionMutation {
	return nc.mutation
}

// Save creates the Nutrition in the database.
func (nc *NutritionCreate) Save(ctx context.Context) (*Nutrition, error) {
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NutritionCreate) SaveX(ctx context.Context) *Nutrition {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NutritionCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NutritionCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NutritionCreate) check() error {
	return nil
}

func (nc *NutritionCreate) sqlSave(ctx context.Context) (*Nutrition, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NutritionCreate) createSpec() (*Nutrition, *sqlgraph.CreateSpec) {
	var (
		_node = &Nutrition{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(nutrition.Table, sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.Calories(); ok {
		_spec.SetField(nutrition.FieldCalories, field.TypeInt, value)
		_node.Calories = value
	}
	if value, ok := nc.mutation.Fat(); ok {
		_spec.SetField(nutrition.FieldFat, field.TypeInt, value)
		_node.Fat = value
	}
	if value, ok := nc.mutation.Carbs(); ok {
		_spec.SetField(nutrition.FieldCarbs, field.TypeInt, value)
		_node.Carbs = value
	}
	if value, ok := nc.mutation.Protein(); ok {
		_spec.SetField(nutrition.FieldProtein, field.TypeInt, value)
		_node.Protein = value
	}
	if value, ok := nc.mutation.Precision(); ok {
		_spec.SetField(nutrition.FieldPrecision, field.TypeString, value)
		_node.Precision = value
	}
	if value, ok := nc.mutation.Benefits(); ok {
		_spec.SetField(nutrition.FieldBenefits, field.TypeJSON, value)
		_node.Benefits = value
	}
	if nodes := nc.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nutrition.RecipeTable,
			Columns: []string{nutrition.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.recipe_nutrition = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NutritionCreateBulk is the builder for creating many Nutrition entities in bulk.
type NutritionCreateBulk struct {
	config
	err      error
	builders []*NutritionCreate
}

// Save creates the Nutrition entities in the database.
func (ncb *NutritionCreateBulk) Save(ctx context.Context) ([]*Nutrition, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nutrition, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NutritionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NutritionCreateBulk) SaveX(ctx context.Context) []*Nutrition {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NutritionCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NutritionCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
