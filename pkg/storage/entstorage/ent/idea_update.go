// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/idea"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// IdeaUpdate is the builder for updating Idea entities.
type IdeaUpdate struct {
	config
	hooks    []Hook
	mutation *IdeaMutation
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iu *IdeaUpdate) Where(ps ...predicate.Idea) *IdeaUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetText sets the "text" field.
func (iu *IdeaUpdate) SetText(s string) *IdeaUpdate {
	iu.mutation.SetText(s)
	return iu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (iu *IdeaUpdate) SetNillableText(s *string) *IdeaUpdate {
	if s != nil {
		iu.SetText(*s)
	}
	return iu
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (iu *IdeaUpdate) SetRecipeID(id uuid.UUID) *IdeaUpdate {
	iu.mutation.SetRecipeID(id)
	return iu
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (iu *IdeaUpdate) SetNillableRecipeID(id *uuid.UUID) *IdeaUpdate {
	if id != nil {
		iu = iu.SetRecipeID(*id)
	}
	return iu
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (iu *IdeaUpdate) SetRecipe(r *Recipe) *IdeaUpdate {
	return iu.SetRecipeID(r.ID)
}

// Mutation returns the IdeaMutation object of the builder.
func (iu *IdeaUpdate) Mutation() *IdeaMutation {
	return iu.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (iu *IdeaUpdate) ClearRecipe() *IdeaUpdate {
	iu.mutation.ClearRecipe()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdeaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdeaUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdeaUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdeaUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IdeaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Text(); ok {
		_spec.SetField(idea.FieldText, field.TypeString, value)
	}
	if iu.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.RecipeTable,
			Columns: []string{idea.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.RecipeTable,
			Columns: []string{idea.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdeaUpdateOne is the builder for updating a single Idea entity.
type IdeaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdeaMutation
}

// SetText sets the "text" field.
func (iuo *IdeaUpdateOne) SetText(s string) *IdeaUpdateOne {
	iuo.mutation.SetText(s)
	return iuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableText(s *string) *IdeaUpdateOne {
	if s != nil {
		iuo.SetText(*s)
	}
	return iuo
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (iuo *IdeaUpdateOne) SetRecipeID(id uuid.UUID) *IdeaUpdateOne {
	iuo.mutation.SetRecipeID(id)
	return iuo
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (iuo *IdeaUpdateOne) SetNillableRecipeID(id *uuid.UUID) *IdeaUpdateOne {
	if id != nil {
		iuo = iuo.SetRecipeID(*id)
	}
	return iuo
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (iuo *IdeaUpdateOne) SetRecipe(r *Recipe) *IdeaUpdateOne {
	return iuo.SetRecipeID(r.ID)
}

// Mutation returns the IdeaMutation object of the builder.
func (iuo *IdeaUpdateOne) Mutation() *IdeaMutation {
	return iuo.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (iuo *IdeaUpdateOne) ClearRecipe() *IdeaUpdateOne {
	iuo.mutation.ClearRecipe()
	return iuo
}

// Where appends a list predicates to the IdeaUpdate builder.
func (iuo *IdeaUpdateOne) Where(ps ...predicate.Idea) *IdeaUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdeaUpdateOne) Select(field string, fields ...string) *IdeaUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Idea entity.
func (iuo *IdeaUpdateOne) Save(ctx context.Context) (*Idea, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdeaUpdateOne) SaveX(ctx context.Context) *Idea {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdeaUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdeaUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IdeaUpdateOne) sqlSave(ctx context.Context) (_node *Idea, err error) {
	_spec := sqlgraph.NewUpdateSpec(idea.Table, idea.Columns, sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Idea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, idea.FieldID)
		for _, f := range fields {
			if !idea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != idea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Text(); ok {
		_spec.SetField(idea.FieldText, field.TypeString, value)
	}
	if iuo.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.RecipeTable,
			Columns: []string{idea.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   idea.RecipeTable,
			Columns: []string{idea.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Idea{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
