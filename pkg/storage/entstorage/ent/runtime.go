// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/equipment"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/idea"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/ingredient"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/product"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/schema"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/source"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/tag"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	equipmentFields := schema.Equipment{}.Fields()
	_ = equipmentFields
	// equipmentDescName is the schema descriptor for name field.
	equipmentDescName := equipmentFields[1].Descriptor()
	// equipment.NameValidator is a validator for the "name" field. It is called by the builders before save.
	equipment.NameValidator = func() func(string) error {
		validators := equipmentDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// equipmentDescSlug is the schema descriptor for slug field.
	equipmentDescSlug := equipmentFields[2].Descriptor()
	// equipment.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	equipment.SlugValidator = func() func(string) error {
		validators := equipmentDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// equipmentDescID is the schema descriptor for id field.
	equipmentDescID := equipmentFields[0].Descriptor()
	// equipment.DefaultID holds the default value on creation for the id field.
	equipment.DefaultID = equipmentDescID.Default.(func() uuid.UUID)
	ideaFields := schema.Idea{}.Fields()
	_ = ideaFields
	// ideaDescID is the schema descriptor for id field.
	ideaDescID := ideaFields[0].Descriptor()
	// idea.DefaultID holds the default value on creation for the id field.
	idea.DefaultID = ideaDescID.Default.(func() uuid.UUID)
	ingredientMixin := schema.Ingredient{}.Mixin()
	ingredientMixinFields0 := ingredientMixin[0].Fields()
	_ = ingredientMixinFields0
	ingredientFields := schema.Ingredient{}.Fields()
	_ = ingredientFields
	// ingredientDescCreateTime is the schema descriptor for create_time field.
	ingredientDescCreateTime := ingredientMixinFields0[0].Descriptor()
	// ingredient.DefaultCreateTime holds the default value on creation for the create_time field.
	ingredient.DefaultCreateTime = ingredientDescCreateTime.Default.(func() time.Time)
	// ingredientDescUpdateTime is the schema descriptor for update_time field.
	ingredientDescUpdateTime := ingredientMixinFields0[1].Descriptor()
	// ingredient.DefaultUpdateTime holds the default value on creation for the update_time field.
	ingredient.DefaultUpdateTime = ingredientDescUpdateTime.Default.(func() time.Time)
	// ingredient.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	ingredient.UpdateDefaultUpdateTime = ingredientDescUpdateTime.UpdateDefault.(func() time.Time)
	// ingredientDescOptional is the schema descriptor for optional field.
	ingredientDescOptional := ingredientFields[5].Descriptor()
	// ingredient.DefaultOptional holds the default value on creation for the optional field.
	ingredient.DefaultOptional = ingredientDescOptional.Default.(bool)
	// ingredientDescID is the schema descriptor for id field.
	ingredientDescID := ingredientFields[0].Descriptor()
	// ingredient.DefaultID holds the default value on creation for the id field.
	ingredient.DefaultID = ingredientDescID.Default.(func() uuid.UUID)
	instructionFields := schema.Instruction{}.Fields()
	_ = instructionFields
	// instructionDescOrder is the schema descriptor for order field.
	instructionDescOrder := instructionFields[2].Descriptor()
	// instruction.OrderValidator is a validator for the "order" field. It is called by the builders before save.
	instruction.OrderValidator = instructionDescOrder.Validators[0].(func(int) error)
	// instructionDescID is the schema descriptor for id field.
	instructionDescID := instructionFields[0].Descriptor()
	// instruction.DefaultID holds the default value on creation for the id field.
	instruction.DefaultID = instructionDescID.Default.(func() uuid.UUID)
	productMixin := schema.Product{}.Mixin()
	productMixinFields0 := productMixin[0].Fields()
	_ = productMixinFields0
	productMixinFields1 := productMixin[1].Fields()
	_ = productMixinFields1
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescCreateTime is the schema descriptor for create_time field.
	productDescCreateTime := productMixinFields0[0].Descriptor()
	// product.DefaultCreateTime holds the default value on creation for the create_time field.
	product.DefaultCreateTime = productDescCreateTime.Default.(func() time.Time)
	// productDescUpdateTime is the schema descriptor for update_time field.
	productDescUpdateTime := productMixinFields0[1].Descriptor()
	// product.DefaultUpdateTime holds the default value on creation for the update_time field.
	product.DefaultUpdateTime = productDescUpdateTime.Default.(func() time.Time)
	// product.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	product.UpdateDefaultUpdateTime = productDescUpdateTime.UpdateDefault.(func() time.Time)
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[1].Descriptor()
	// product.NameValidator is a validator for the "name" field. It is called by the builders before save.
	product.NameValidator = func() func(string) error {
		validators := productDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// productDescSlug is the schema descriptor for slug field.
	productDescSlug := productFields[2].Descriptor()
	// product.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	product.SlugValidator = func() func(string) error {
		validators := productDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// productDescID is the schema descriptor for id field.
	productDescID := productFields[0].Descriptor()
	// product.DefaultID holds the default value on creation for the id field.
	product.DefaultID = productDescID.Default.(func() uuid.UUID)
	recipeMixin := schema.Recipe{}.Mixin()
	recipeMixinFields0 := recipeMixin[0].Fields()
	_ = recipeMixinFields0
	recipeMixinFields1 := recipeMixin[1].Fields()
	_ = recipeMixinFields1
	recipeFields := schema.Recipe{}.Fields()
	_ = recipeFields
	// recipeDescCreateTime is the schema descriptor for create_time field.
	recipeDescCreateTime := recipeMixinFields0[0].Descriptor()
	// recipe.DefaultCreateTime holds the default value on creation for the create_time field.
	recipe.DefaultCreateTime = recipeDescCreateTime.Default.(func() time.Time)
	// recipeDescUpdateTime is the schema descriptor for update_time field.
	recipeDescUpdateTime := recipeMixinFields0[1].Descriptor()
	// recipe.DefaultUpdateTime holds the default value on creation for the update_time field.
	recipe.DefaultUpdateTime = recipeDescUpdateTime.Default.(func() time.Time)
	// recipe.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	recipe.UpdateDefaultUpdateTime = recipeDescUpdateTime.UpdateDefault.(func() time.Time)
	// recipeDescName is the schema descriptor for name field.
	recipeDescName := recipeFields[1].Descriptor()
	// recipe.NameValidator is a validator for the "name" field. It is called by the builders before save.
	recipe.NameValidator = recipeDescName.Validators[0].(func(string) error)
	// recipeDescSlug is the schema descriptor for slug field.
	recipeDescSlug := recipeFields[2].Descriptor()
	// recipe.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	recipe.SlugValidator = recipeDescSlug.Validators[0].(func(string) error)
	// recipeDescRating is the schema descriptor for rating field.
	recipeDescRating := recipeFields[5].Descriptor()
	// recipe.RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	recipe.RatingValidator = recipeDescRating.Validators[0].(func(float32) error)
	// recipeDescServings is the schema descriptor for servings field.
	recipeDescServings := recipeFields[6].Descriptor()
	// recipe.ServingsValidator is a validator for the "servings" field. It is called by the builders before save.
	recipe.ServingsValidator = recipeDescServings.Validators[0].(func(int) error)
	// recipeDescPublished is the schema descriptor for published field.
	recipeDescPublished := recipeFields[8].Descriptor()
	// recipe.DefaultPublished holds the default value on creation for the published field.
	recipe.DefaultPublished = recipeDescPublished.Default.(bool)
	// recipeDescID is the schema descriptor for id field.
	recipeDescID := recipeFields[0].Descriptor()
	// recipe.DefaultID holds the default value on creation for the id field.
	recipe.DefaultID = recipeDescID.Default.(func() uuid.UUID)
	sourceFields := schema.Source{}.Fields()
	_ = sourceFields
	// sourceDescID is the schema descriptor for id field.
	sourceDescID := sourceFields[0].Descriptor()
	// source.DefaultID holds the default value on creation for the id field.
	source.DefaultID = sourceDescID.Default.(func() uuid.UUID)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[1].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = func() func(string) error {
		validators := tagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescGroup is the schema descriptor for group field.
	tagDescGroup := tagFields[2].Descriptor()
	// tag.GroupValidator is a validator for the "group" field. It is called by the builders before save.
	tag.GroupValidator = func() func(string) error {
		validators := tagDescGroup.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(group string) error {
			for _, fn := range fns {
				if err := fn(group); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescSlug is the schema descriptor for slug field.
	tagDescSlug := tagFields[3].Descriptor()
	// tag.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	tag.SlugValidator = func() func(string) error {
		validators := tagDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tagDescID is the schema descriptor for id field.
	tagDescID := tagFields[0].Descriptor()
	// tag.DefaultID holds the default value on creation for the id field.
	tag.DefaultID = tagDescID.Default.(func() uuid.UUID)
}
