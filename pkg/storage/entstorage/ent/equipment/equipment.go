// Code generated by ent, DO NOT EDIT.

package equipment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the equipment type in the database.
	Label = "equipment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// EdgeRecipes holds the string denoting the recipes edge name in mutations.
	EdgeRecipes = "recipes"
	// Table holds the table name of the equipment in the database.
	Table = "equipment"
	// RecipesTable is the table that holds the recipes relation/edge. The primary key declared below.
	RecipesTable = "recipe_equipment"
	// RecipesInverseTable is the table name for the Recipe entity.
	// It exists in this package in order to avoid circular dependency with the "recipe" package.
	RecipesInverseTable = "recipes"
)

// Columns holds all SQL columns for equipment fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
}

var (
	// RecipesPrimaryKey and RecipesColumn2 are the table columns denoting the
	// primary key for the recipes relation (M2M).
	RecipesPrimaryKey = []string{"recipe_id", "equipment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Equipment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByRecipesCount orders the results by recipes count.
func ByRecipesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecipesStep(), opts...)
	}
}

// ByRecipes orders the results by recipes terms.
func ByRecipes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecipesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RecipesTable, RecipesPrimaryKey...),
	)
}
