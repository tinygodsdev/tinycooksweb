// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// Recipe is the model entity for the Recipe schema.
type Recipe struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale recipe.Locale `json:"locale,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Servings holds the value of the "servings" field.
	Servings *int `json:"servings,omitempty"`
	// Time holds the value of the "time" field.
	Time *time.Duration `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipeQuery when eager-loading is set.
	Edges        RecipeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecipeEdges holds the relations/edges for other nodes in the graph.
type RecipeEdges struct {
	// RequiredProducts holds the value of the required_products edge.
	RequiredProducts []*Product `json:"required_products,omitempty"`
	// Instructions holds the value of the instructions edge.
	Instructions []*Instruction `json:"instructions,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Equipment holds the value of the equipment edge.
	Equipment []*Equipment `json:"equipment,omitempty"`
	// Ideas holds the value of the ideas edge.
	Ideas []*Idea `json:"ideas,omitempty"`
	// Sources holds the value of the sources edge.
	Sources []*Source `json:"sources,omitempty"`
	// Nutrition holds the value of the nutrition edge.
	Nutrition *Nutrition `json:"nutrition,omitempty"`
	// Ingredients holds the value of the ingredients edge.
	Ingredients []*Ingredient `json:"ingredients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// RequiredProductsOrErr returns the RequiredProducts value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) RequiredProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.RequiredProducts, nil
	}
	return nil, &NotLoadedError{edge: "required_products"}
}

// InstructionsOrErr returns the Instructions value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) InstructionsOrErr() ([]*Instruction, error) {
	if e.loadedTypes[1] {
		return e.Instructions, nil
	}
	return nil, &NotLoadedError{edge: "instructions"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[2] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// EquipmentOrErr returns the Equipment value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) EquipmentOrErr() ([]*Equipment, error) {
	if e.loadedTypes[3] {
		return e.Equipment, nil
	}
	return nil, &NotLoadedError{edge: "equipment"}
}

// IdeasOrErr returns the Ideas value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) IdeasOrErr() ([]*Idea, error) {
	if e.loadedTypes[4] {
		return e.Ideas, nil
	}
	return nil, &NotLoadedError{edge: "ideas"}
}

// SourcesOrErr returns the Sources value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) SourcesOrErr() ([]*Source, error) {
	if e.loadedTypes[5] {
		return e.Sources, nil
	}
	return nil, &NotLoadedError{edge: "sources"}
}

// NutritionOrErr returns the Nutrition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecipeEdges) NutritionOrErr() (*Nutrition, error) {
	if e.Nutrition != nil {
		return e.Nutrition, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: nutrition.Label}
	}
	return nil, &NotLoadedError{edge: "nutrition"}
}

// IngredientsOrErr returns the Ingredients value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) IngredientsOrErr() ([]*Ingredient, error) {
	if e.loadedTypes[7] {
		return e.Ingredients, nil
	}
	return nil, &NotLoadedError{edge: "ingredients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipe.FieldServings, recipe.FieldTime:
			values[i] = new(sql.NullInt64)
		case recipe.FieldLocale, recipe.FieldName, recipe.FieldSlug, recipe.FieldDescription, recipe.FieldText:
			values[i] = new(sql.NullString)
		case recipe.FieldCreateTime, recipe.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case recipe.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipe fields.
func (r *Recipe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case recipe.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case recipe.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case recipe.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				r.Locale = recipe.Locale(value.String)
			}
		case recipe.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case recipe.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				r.Slug = value.String
			}
		case recipe.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case recipe.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				r.Text = value.String
			}
		case recipe.FieldServings:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field servings", values[i])
			} else if value.Valid {
				r.Servings = new(int)
				*r.Servings = int(value.Int64)
			}
		case recipe.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				r.Time = new(time.Duration)
				*r.Time = time.Duration(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Recipe.
// This includes values selected through modifiers, order, etc.
func (r *Recipe) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRequiredProducts queries the "required_products" edge of the Recipe entity.
func (r *Recipe) QueryRequiredProducts() *ProductQuery {
	return NewRecipeClient(r.config).QueryRequiredProducts(r)
}

// QueryInstructions queries the "instructions" edge of the Recipe entity.
func (r *Recipe) QueryInstructions() *InstructionQuery {
	return NewRecipeClient(r.config).QueryInstructions(r)
}

// QueryTags queries the "tags" edge of the Recipe entity.
func (r *Recipe) QueryTags() *TagQuery {
	return NewRecipeClient(r.config).QueryTags(r)
}

// QueryEquipment queries the "equipment" edge of the Recipe entity.
func (r *Recipe) QueryEquipment() *EquipmentQuery {
	return NewRecipeClient(r.config).QueryEquipment(r)
}

// QueryIdeas queries the "ideas" edge of the Recipe entity.
func (r *Recipe) QueryIdeas() *IdeaQuery {
	return NewRecipeClient(r.config).QueryIdeas(r)
}

// QuerySources queries the "sources" edge of the Recipe entity.
func (r *Recipe) QuerySources() *SourceQuery {
	return NewRecipeClient(r.config).QuerySources(r)
}

// QueryNutrition queries the "nutrition" edge of the Recipe entity.
func (r *Recipe) QueryNutrition() *NutritionQuery {
	return NewRecipeClient(r.config).QueryNutrition(r)
}

// QueryIngredients queries the "ingredients" edge of the Recipe entity.
func (r *Recipe) QueryIngredients() *IngredientQuery {
	return NewRecipeClient(r.config).QueryIngredients(r)
}

// Update returns a builder for updating this Recipe.
// Note that you need to call Recipe.Unwrap() before calling this method if this Recipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipe) Update() *RecipeUpdateOne {
	return NewRecipeClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Recipe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recipe) Unwrap() *Recipe {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipe is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipe) String() string {
	var builder strings.Builder
	builder.WriteString("Recipe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(fmt.Sprintf("%v", r.Locale))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(r.Slug)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(r.Text)
	builder.WriteString(", ")
	if v := r.Servings; v != nil {
		builder.WriteString("servings=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := r.Time; v != nil {
		builder.WriteString("time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Recipes is a parsable slice of Recipe.
type Recipes []*Recipe
