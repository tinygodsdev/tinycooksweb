// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// NutritionUpdate is the builder for updating Nutrition entities.
type NutritionUpdate struct {
	config
	hooks    []Hook
	mutation *NutritionMutation
}

// Where appends a list predicates to the NutritionUpdate builder.
func (nu *NutritionUpdate) Where(ps ...predicate.Nutrition) *NutritionUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetCalories sets the "calories" field.
func (nu *NutritionUpdate) SetCalories(i int) *NutritionUpdate {
	nu.mutation.ResetCalories()
	nu.mutation.SetCalories(i)
	return nu
}

// SetNillableCalories sets the "calories" field if the given value is not nil.
func (nu *NutritionUpdate) SetNillableCalories(i *int) *NutritionUpdate {
	if i != nil {
		nu.SetCalories(*i)
	}
	return nu
}

// AddCalories adds i to the "calories" field.
func (nu *NutritionUpdate) AddCalories(i int) *NutritionUpdate {
	nu.mutation.AddCalories(i)
	return nu
}

// ClearCalories clears the value of the "calories" field.
func (nu *NutritionUpdate) ClearCalories() *NutritionUpdate {
	nu.mutation.ClearCalories()
	return nu
}

// SetFat sets the "fat" field.
func (nu *NutritionUpdate) SetFat(i int) *NutritionUpdate {
	nu.mutation.ResetFat()
	nu.mutation.SetFat(i)
	return nu
}

// SetNillableFat sets the "fat" field if the given value is not nil.
func (nu *NutritionUpdate) SetNillableFat(i *int) *NutritionUpdate {
	if i != nil {
		nu.SetFat(*i)
	}
	return nu
}

// AddFat adds i to the "fat" field.
func (nu *NutritionUpdate) AddFat(i int) *NutritionUpdate {
	nu.mutation.AddFat(i)
	return nu
}

// ClearFat clears the value of the "fat" field.
func (nu *NutritionUpdate) ClearFat() *NutritionUpdate {
	nu.mutation.ClearFat()
	return nu
}

// SetCarbs sets the "carbs" field.
func (nu *NutritionUpdate) SetCarbs(i int) *NutritionUpdate {
	nu.mutation.ResetCarbs()
	nu.mutation.SetCarbs(i)
	return nu
}

// SetNillableCarbs sets the "carbs" field if the given value is not nil.
func (nu *NutritionUpdate) SetNillableCarbs(i *int) *NutritionUpdate {
	if i != nil {
		nu.SetCarbs(*i)
	}
	return nu
}

// AddCarbs adds i to the "carbs" field.
func (nu *NutritionUpdate) AddCarbs(i int) *NutritionUpdate {
	nu.mutation.AddCarbs(i)
	return nu
}

// ClearCarbs clears the value of the "carbs" field.
func (nu *NutritionUpdate) ClearCarbs() *NutritionUpdate {
	nu.mutation.ClearCarbs()
	return nu
}

// SetProtein sets the "protein" field.
func (nu *NutritionUpdate) SetProtein(i int) *NutritionUpdate {
	nu.mutation.ResetProtein()
	nu.mutation.SetProtein(i)
	return nu
}

// SetNillableProtein sets the "protein" field if the given value is not nil.
func (nu *NutritionUpdate) SetNillableProtein(i *int) *NutritionUpdate {
	if i != nil {
		nu.SetProtein(*i)
	}
	return nu
}

// AddProtein adds i to the "protein" field.
func (nu *NutritionUpdate) AddProtein(i int) *NutritionUpdate {
	nu.mutation.AddProtein(i)
	return nu
}

// ClearProtein clears the value of the "protein" field.
func (nu *NutritionUpdate) ClearProtein() *NutritionUpdate {
	nu.mutation.ClearProtein()
	return nu
}

// SetPrecision sets the "precision" field.
func (nu *NutritionUpdate) SetPrecision(s string) *NutritionUpdate {
	nu.mutation.SetPrecision(s)
	return nu
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (nu *NutritionUpdate) SetNillablePrecision(s *string) *NutritionUpdate {
	if s != nil {
		nu.SetPrecision(*s)
	}
	return nu
}

// ClearPrecision clears the value of the "precision" field.
func (nu *NutritionUpdate) ClearPrecision() *NutritionUpdate {
	nu.mutation.ClearPrecision()
	return nu
}

// SetBenefits sets the "benefits" field.
func (nu *NutritionUpdate) SetBenefits(s []string) *NutritionUpdate {
	nu.mutation.SetBenefits(s)
	return nu
}

// AppendBenefits appends s to the "benefits" field.
func (nu *NutritionUpdate) AppendBenefits(s []string) *NutritionUpdate {
	nu.mutation.AppendBenefits(s)
	return nu
}

// ClearBenefits clears the value of the "benefits" field.
func (nu *NutritionUpdate) ClearBenefits() *NutritionUpdate {
	nu.mutation.ClearBenefits()
	return nu
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (nu *NutritionUpdate) SetRecipeID(id uuid.UUID) *NutritionUpdate {
	nu.mutation.SetRecipeID(id)
	return nu
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (nu *NutritionUpdate) SetNillableRecipeID(id *uuid.UUID) *NutritionUpdate {
	if id != nil {
		nu = nu.SetRecipeID(*id)
	}
	return nu
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (nu *NutritionUpdate) SetRecipe(r *Recipe) *NutritionUpdate {
	return nu.SetRecipeID(r.ID)
}

// Mutation returns the NutritionMutation object of the builder.
func (nu *NutritionUpdate) Mutation() *NutritionMutation {
	return nu.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (nu *NutritionUpdate) ClearRecipe() *NutritionUpdate {
	nu.mutation.ClearRecipe()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NutritionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NutritionUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NutritionUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NutritionUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NutritionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nutrition.Table, nutrition.Columns, sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Calories(); ok {
		_spec.SetField(nutrition.FieldCalories, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedCalories(); ok {
		_spec.AddField(nutrition.FieldCalories, field.TypeInt, value)
	}
	if nu.mutation.CaloriesCleared() {
		_spec.ClearField(nutrition.FieldCalories, field.TypeInt)
	}
	if value, ok := nu.mutation.Fat(); ok {
		_spec.SetField(nutrition.FieldFat, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedFat(); ok {
		_spec.AddField(nutrition.FieldFat, field.TypeInt, value)
	}
	if nu.mutation.FatCleared() {
		_spec.ClearField(nutrition.FieldFat, field.TypeInt)
	}
	if value, ok := nu.mutation.Carbs(); ok {
		_spec.SetField(nutrition.FieldCarbs, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedCarbs(); ok {
		_spec.AddField(nutrition.FieldCarbs, field.TypeInt, value)
	}
	if nu.mutation.CarbsCleared() {
		_spec.ClearField(nutrition.FieldCarbs, field.TypeInt)
	}
	if value, ok := nu.mutation.Protein(); ok {
		_spec.SetField(nutrition.FieldProtein, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedProtein(); ok {
		_spec.AddField(nutrition.FieldProtein, field.TypeInt, value)
	}
	if nu.mutation.ProteinCleared() {
		_spec.ClearField(nutrition.FieldProtein, field.TypeInt)
	}
	if value, ok := nu.mutation.Precision(); ok {
		_spec.SetField(nutrition.FieldPrecision, field.TypeString, value)
	}
	if nu.mutation.PrecisionCleared() {
		_spec.ClearField(nutrition.FieldPrecision, field.TypeString)
	}
	if value, ok := nu.mutation.Benefits(); ok {
		_spec.SetField(nutrition.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nutrition.FieldBenefits, value)
		})
	}
	if nu.mutation.BenefitsCleared() {
		_spec.ClearField(nutrition.FieldBenefits, field.TypeJSON)
	}
	if nu.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nutrition.RecipeTable,
			Columns: []string{nutrition.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nutrition.RecipeTable,
			Columns: []string{nutrition.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutrition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NutritionUpdateOne is the builder for updating a single Nutrition entity.
type NutritionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NutritionMutation
}

// SetCalories sets the "calories" field.
func (nuo *NutritionUpdateOne) SetCalories(i int) *NutritionUpdateOne {
	nuo.mutation.ResetCalories()
	nuo.mutation.SetCalories(i)
	return nuo
}

// SetNillableCalories sets the "calories" field if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillableCalories(i *int) *NutritionUpdateOne {
	if i != nil {
		nuo.SetCalories(*i)
	}
	return nuo
}

// AddCalories adds i to the "calories" field.
func (nuo *NutritionUpdateOne) AddCalories(i int) *NutritionUpdateOne {
	nuo.mutation.AddCalories(i)
	return nuo
}

// ClearCalories clears the value of the "calories" field.
func (nuo *NutritionUpdateOne) ClearCalories() *NutritionUpdateOne {
	nuo.mutation.ClearCalories()
	return nuo
}

// SetFat sets the "fat" field.
func (nuo *NutritionUpdateOne) SetFat(i int) *NutritionUpdateOne {
	nuo.mutation.ResetFat()
	nuo.mutation.SetFat(i)
	return nuo
}

// SetNillableFat sets the "fat" field if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillableFat(i *int) *NutritionUpdateOne {
	if i != nil {
		nuo.SetFat(*i)
	}
	return nuo
}

// AddFat adds i to the "fat" field.
func (nuo *NutritionUpdateOne) AddFat(i int) *NutritionUpdateOne {
	nuo.mutation.AddFat(i)
	return nuo
}

// ClearFat clears the value of the "fat" field.
func (nuo *NutritionUpdateOne) ClearFat() *NutritionUpdateOne {
	nuo.mutation.ClearFat()
	return nuo
}

// SetCarbs sets the "carbs" field.
func (nuo *NutritionUpdateOne) SetCarbs(i int) *NutritionUpdateOne {
	nuo.mutation.ResetCarbs()
	nuo.mutation.SetCarbs(i)
	return nuo
}

// SetNillableCarbs sets the "carbs" field if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillableCarbs(i *int) *NutritionUpdateOne {
	if i != nil {
		nuo.SetCarbs(*i)
	}
	return nuo
}

// AddCarbs adds i to the "carbs" field.
func (nuo *NutritionUpdateOne) AddCarbs(i int) *NutritionUpdateOne {
	nuo.mutation.AddCarbs(i)
	return nuo
}

// ClearCarbs clears the value of the "carbs" field.
func (nuo *NutritionUpdateOne) ClearCarbs() *NutritionUpdateOne {
	nuo.mutation.ClearCarbs()
	return nuo
}

// SetProtein sets the "protein" field.
func (nuo *NutritionUpdateOne) SetProtein(i int) *NutritionUpdateOne {
	nuo.mutation.ResetProtein()
	nuo.mutation.SetProtein(i)
	return nuo
}

// SetNillableProtein sets the "protein" field if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillableProtein(i *int) *NutritionUpdateOne {
	if i != nil {
		nuo.SetProtein(*i)
	}
	return nuo
}

// AddProtein adds i to the "protein" field.
func (nuo *NutritionUpdateOne) AddProtein(i int) *NutritionUpdateOne {
	nuo.mutation.AddProtein(i)
	return nuo
}

// ClearProtein clears the value of the "protein" field.
func (nuo *NutritionUpdateOne) ClearProtein() *NutritionUpdateOne {
	nuo.mutation.ClearProtein()
	return nuo
}

// SetPrecision sets the "precision" field.
func (nuo *NutritionUpdateOne) SetPrecision(s string) *NutritionUpdateOne {
	nuo.mutation.SetPrecision(s)
	return nuo
}

// SetNillablePrecision sets the "precision" field if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillablePrecision(s *string) *NutritionUpdateOne {
	if s != nil {
		nuo.SetPrecision(*s)
	}
	return nuo
}

// ClearPrecision clears the value of the "precision" field.
func (nuo *NutritionUpdateOne) ClearPrecision() *NutritionUpdateOne {
	nuo.mutation.ClearPrecision()
	return nuo
}

// SetBenefits sets the "benefits" field.
func (nuo *NutritionUpdateOne) SetBenefits(s []string) *NutritionUpdateOne {
	nuo.mutation.SetBenefits(s)
	return nuo
}

// AppendBenefits appends s to the "benefits" field.
func (nuo *NutritionUpdateOne) AppendBenefits(s []string) *NutritionUpdateOne {
	nuo.mutation.AppendBenefits(s)
	return nuo
}

// ClearBenefits clears the value of the "benefits" field.
func (nuo *NutritionUpdateOne) ClearBenefits() *NutritionUpdateOne {
	nuo.mutation.ClearBenefits()
	return nuo
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (nuo *NutritionUpdateOne) SetRecipeID(id uuid.UUID) *NutritionUpdateOne {
	nuo.mutation.SetRecipeID(id)
	return nuo
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (nuo *NutritionUpdateOne) SetNillableRecipeID(id *uuid.UUID) *NutritionUpdateOne {
	if id != nil {
		nuo = nuo.SetRecipeID(*id)
	}
	return nuo
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (nuo *NutritionUpdateOne) SetRecipe(r *Recipe) *NutritionUpdateOne {
	return nuo.SetRecipeID(r.ID)
}

// Mutation returns the NutritionMutation object of the builder.
func (nuo *NutritionUpdateOne) Mutation() *NutritionMutation {
	return nuo.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (nuo *NutritionUpdateOne) ClearRecipe() *NutritionUpdateOne {
	nuo.mutation.ClearRecipe()
	return nuo
}

// Where appends a list predicates to the NutritionUpdate builder.
func (nuo *NutritionUpdateOne) Where(ps ...predicate.Nutrition) *NutritionUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NutritionUpdateOne) Select(field string, fields ...string) *NutritionUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nutrition entity.
func (nuo *NutritionUpdateOne) Save(ctx context.Context) (*Nutrition, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NutritionUpdateOne) SaveX(ctx context.Context) *Nutrition {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NutritionUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NutritionUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NutritionUpdateOne) sqlSave(ctx context.Context) (_node *Nutrition, err error) {
	_spec := sqlgraph.NewUpdateSpec(nutrition.Table, nutrition.Columns, sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nutrition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nutrition.FieldID)
		for _, f := range fields {
			if !nutrition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nutrition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Calories(); ok {
		_spec.SetField(nutrition.FieldCalories, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedCalories(); ok {
		_spec.AddField(nutrition.FieldCalories, field.TypeInt, value)
	}
	if nuo.mutation.CaloriesCleared() {
		_spec.ClearField(nutrition.FieldCalories, field.TypeInt)
	}
	if value, ok := nuo.mutation.Fat(); ok {
		_spec.SetField(nutrition.FieldFat, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedFat(); ok {
		_spec.AddField(nutrition.FieldFat, field.TypeInt, value)
	}
	if nuo.mutation.FatCleared() {
		_spec.ClearField(nutrition.FieldFat, field.TypeInt)
	}
	if value, ok := nuo.mutation.Carbs(); ok {
		_spec.SetField(nutrition.FieldCarbs, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedCarbs(); ok {
		_spec.AddField(nutrition.FieldCarbs, field.TypeInt, value)
	}
	if nuo.mutation.CarbsCleared() {
		_spec.ClearField(nutrition.FieldCarbs, field.TypeInt)
	}
	if value, ok := nuo.mutation.Protein(); ok {
		_spec.SetField(nutrition.FieldProtein, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedProtein(); ok {
		_spec.AddField(nutrition.FieldProtein, field.TypeInt, value)
	}
	if nuo.mutation.ProteinCleared() {
		_spec.ClearField(nutrition.FieldProtein, field.TypeInt)
	}
	if value, ok := nuo.mutation.Precision(); ok {
		_spec.SetField(nutrition.FieldPrecision, field.TypeString, value)
	}
	if nuo.mutation.PrecisionCleared() {
		_spec.ClearField(nutrition.FieldPrecision, field.TypeString)
	}
	if value, ok := nuo.mutation.Benefits(); ok {
		_spec.SetField(nutrition.FieldBenefits, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedBenefits(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nutrition.FieldBenefits, value)
		})
	}
	if nuo.mutation.BenefitsCleared() {
		_spec.ClearField(nutrition.FieldBenefits, field.TypeJSON)
	}
	if nuo.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nutrition.RecipeTable,
			Columns: []string{nutrition.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nutrition.RecipeTable,
			Columns: []string{nutrition.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nutrition{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nutrition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
