// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// Instruction is the model entity for the Instruction schema.
type Instruction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstructionQuery when eager-loading is set.
	Edges               InstructionEdges `json:"edges"`
	recipe_instructions *uuid.UUID
	selectValues        sql.SelectValues
}

// InstructionEdges holds the relations/edges for other nodes in the graph.
type InstructionEdges struct {
	// Recipe holds the value of the recipe edge.
	Recipe *Recipe `json:"recipe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipeOrErr returns the Recipe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstructionEdges) RecipeOrErr() (*Recipe, error) {
	if e.Recipe != nil {
		return e.Recipe, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: recipe.Label}
	}
	return nil, &NotLoadedError{edge: "recipe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Instruction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instruction.FieldOrder:
			values[i] = new(sql.NullInt64)
		case instruction.FieldText:
			values[i] = new(sql.NullString)
		case instruction.FieldID:
			values[i] = new(uuid.UUID)
		case instruction.ForeignKeys[0]: // recipe_instructions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Instruction fields.
func (i *Instruction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case instruction.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case instruction.FieldText:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[j])
			} else if value.Valid {
				i.Text = value.String
			}
		case instruction.FieldOrder:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[j])
			} else if value.Valid {
				i.Order = int(value.Int64)
			}
		case instruction.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field recipe_instructions", values[j])
			} else if value.Valid {
				i.recipe_instructions = new(uuid.UUID)
				*i.recipe_instructions = *value.S.(*uuid.UUID)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Instruction.
// This includes values selected through modifiers, order, etc.
func (i *Instruction) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryRecipe queries the "recipe" edge of the Instruction entity.
func (i *Instruction) QueryRecipe() *RecipeQuery {
	return NewInstructionClient(i.config).QueryRecipe(i)
}

// Update returns a builder for updating this Instruction.
// Note that you need to call Instruction.Unwrap() before calling this method if this Instruction
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Instruction) Update() *InstructionUpdateOne {
	return NewInstructionClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Instruction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Instruction) Unwrap() *Instruction {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Instruction is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Instruction) String() string {
	var builder strings.Builder
	builder.WriteString("Instruction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("text=")
	builder.WriteString(i.Text)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", i.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Instructions is a parsable slice of Instruction.
type Instructions []*Instruction
