// Code generated by ent, DO NOT EDIT.

package product

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// EdgeRequiredInRecipes holds the string denoting the required_in_recipes edge name in mutations.
	EdgeRequiredInRecipes = "required_in_recipes"
	// EdgeIngredients holds the string denoting the ingredients edge name in mutations.
	EdgeIngredients = "ingredients"
	// Table holds the table name of the product in the database.
	Table = "products"
	// RequiredInRecipesTable is the table that holds the required_in_recipes relation/edge. The primary key declared below.
	RequiredInRecipesTable = "ingredients"
	// RequiredInRecipesInverseTable is the table name for the Recipe entity.
	// It exists in this package in order to avoid circular dependency with the "recipe" package.
	RequiredInRecipesInverseTable = "recipes"
	// IngredientsTable is the table that holds the ingredients relation/edge.
	IngredientsTable = "ingredients"
	// IngredientsInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientsInverseTable = "ingredients"
	// IngredientsColumn is the table column denoting the ingredients relation/edge.
	IngredientsColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldLocale,
	FieldName,
	FieldSlug,
}

var (
	// RequiredInRecipesPrimaryKey and RequiredInRecipesColumn2 are the table columns denoting the
	// primary key for the required_in_recipes relation (M2M).
	RequiredInRecipesPrimaryKey = []string{"recipe_id", "product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Locale defines the type for the "locale" enum field.
type Locale string

// LocaleRu is the default value of the Locale enum.
const DefaultLocale = LocaleRu

// Locale values.
const (
	LocaleEn Locale = "en"
	LocaleRu Locale = "ru"
)

func (l Locale) String() string {
	return string(l)
}

// LocaleValidator is a validator for the "locale" field enum values. It is called by the builders before save.
func LocaleValidator(l Locale) error {
	switch l {
	case LocaleEn, LocaleRu:
		return nil
	default:
		return fmt.Errorf("product: invalid enum value for locale field: %q", l)
	}
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByRequiredInRecipesCount orders the results by required_in_recipes count.
func ByRequiredInRecipesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequiredInRecipesStep(), opts...)
	}
}

// ByRequiredInRecipes orders the results by required_in_recipes terms.
func ByRequiredInRecipes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequiredInRecipesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIngredientsCount orders the results by ingredients count.
func ByIngredientsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIngredientsStep(), opts...)
	}
}

// ByIngredients orders the results by ingredients terms.
func ByIngredients(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngredientsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequiredInRecipesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequiredInRecipesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RequiredInRecipesTable, RequiredInRecipesPrimaryKey...),
	)
}
func newIngredientsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngredientsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, IngredientsTable, IngredientsColumn),
	)
}
