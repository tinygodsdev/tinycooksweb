// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
)

// InstructionUpdate is the builder for updating Instruction entities.
type InstructionUpdate struct {
	config
	hooks    []Hook
	mutation *InstructionMutation
}

// Where appends a list predicates to the InstructionUpdate builder.
func (iu *InstructionUpdate) Where(ps ...predicate.Instruction) *InstructionUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetText sets the "text" field.
func (iu *InstructionUpdate) SetText(s string) *InstructionUpdate {
	iu.mutation.SetText(s)
	return iu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (iu *InstructionUpdate) SetNillableText(s *string) *InstructionUpdate {
	if s != nil {
		iu.SetText(*s)
	}
	return iu
}

// SetOrder sets the "order" field.
func (iu *InstructionUpdate) SetOrder(i int) *InstructionUpdate {
	iu.mutation.ResetOrder()
	iu.mutation.SetOrder(i)
	return iu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (iu *InstructionUpdate) SetNillableOrder(i *int) *InstructionUpdate {
	if i != nil {
		iu.SetOrder(*i)
	}
	return iu
}

// AddOrder adds i to the "order" field.
func (iu *InstructionUpdate) AddOrder(i int) *InstructionUpdate {
	iu.mutation.AddOrder(i)
	return iu
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (iu *InstructionUpdate) SetRecipeID(id uuid.UUID) *InstructionUpdate {
	iu.mutation.SetRecipeID(id)
	return iu
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (iu *InstructionUpdate) SetNillableRecipeID(id *uuid.UUID) *InstructionUpdate {
	if id != nil {
		iu = iu.SetRecipeID(*id)
	}
	return iu
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (iu *InstructionUpdate) SetRecipe(r *Recipe) *InstructionUpdate {
	return iu.SetRecipeID(r.ID)
}

// Mutation returns the InstructionMutation object of the builder.
func (iu *InstructionUpdate) Mutation() *InstructionMutation {
	return iu.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (iu *InstructionUpdate) ClearRecipe() *InstructionUpdate {
	iu.mutation.ClearRecipe()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstructionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstructionUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstructionUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstructionUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InstructionUpdate) check() error {
	if v, ok := iu.mutation.Order(); ok {
		if err := instruction.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Instruction.order": %w`, err)}
		}
	}
	return nil
}

func (iu *InstructionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(instruction.Table, instruction.Columns, sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Text(); ok {
		_spec.SetField(instruction.FieldText, field.TypeString, value)
	}
	if value, ok := iu.mutation.Order(); ok {
		_spec.SetField(instruction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedOrder(); ok {
		_spec.AddField(instruction.FieldOrder, field.TypeInt, value)
	}
	if iu.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instruction.RecipeTable,
			Columns: []string{instruction.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instruction.RecipeTable,
			Columns: []string{instruction.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instruction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstructionUpdateOne is the builder for updating a single Instruction entity.
type InstructionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstructionMutation
}

// SetText sets the "text" field.
func (iuo *InstructionUpdateOne) SetText(s string) *InstructionUpdateOne {
	iuo.mutation.SetText(s)
	return iuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (iuo *InstructionUpdateOne) SetNillableText(s *string) *InstructionUpdateOne {
	if s != nil {
		iuo.SetText(*s)
	}
	return iuo
}

// SetOrder sets the "order" field.
func (iuo *InstructionUpdateOne) SetOrder(i int) *InstructionUpdateOne {
	iuo.mutation.ResetOrder()
	iuo.mutation.SetOrder(i)
	return iuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (iuo *InstructionUpdateOne) SetNillableOrder(i *int) *InstructionUpdateOne {
	if i != nil {
		iuo.SetOrder(*i)
	}
	return iuo
}

// AddOrder adds i to the "order" field.
func (iuo *InstructionUpdateOne) AddOrder(i int) *InstructionUpdateOne {
	iuo.mutation.AddOrder(i)
	return iuo
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by ID.
func (iuo *InstructionUpdateOne) SetRecipeID(id uuid.UUID) *InstructionUpdateOne {
	iuo.mutation.SetRecipeID(id)
	return iuo
}

// SetNillableRecipeID sets the "recipe" edge to the Recipe entity by ID if the given value is not nil.
func (iuo *InstructionUpdateOne) SetNillableRecipeID(id *uuid.UUID) *InstructionUpdateOne {
	if id != nil {
		iuo = iuo.SetRecipeID(*id)
	}
	return iuo
}

// SetRecipe sets the "recipe" edge to the Recipe entity.
func (iuo *InstructionUpdateOne) SetRecipe(r *Recipe) *InstructionUpdateOne {
	return iuo.SetRecipeID(r.ID)
}

// Mutation returns the InstructionMutation object of the builder.
func (iuo *InstructionUpdateOne) Mutation() *InstructionMutation {
	return iuo.mutation
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (iuo *InstructionUpdateOne) ClearRecipe() *InstructionUpdateOne {
	iuo.mutation.ClearRecipe()
	return iuo
}

// Where appends a list predicates to the InstructionUpdate builder.
func (iuo *InstructionUpdateOne) Where(ps ...predicate.Instruction) *InstructionUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstructionUpdateOne) Select(field string, fields ...string) *InstructionUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Instruction entity.
func (iuo *InstructionUpdateOne) Save(ctx context.Context) (*Instruction, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstructionUpdateOne) SaveX(ctx context.Context) *Instruction {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstructionUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstructionUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InstructionUpdateOne) check() error {
	if v, ok := iuo.mutation.Order(); ok {
		if err := instruction.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Instruction.order": %w`, err)}
		}
	}
	return nil
}

func (iuo *InstructionUpdateOne) sqlSave(ctx context.Context) (_node *Instruction, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instruction.Table, instruction.Columns, sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Instruction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instruction.FieldID)
		for _, f := range fields {
			if !instruction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instruction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Text(); ok {
		_spec.SetField(instruction.FieldText, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Order(); ok {
		_spec.SetField(instruction.FieldOrder, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedOrder(); ok {
		_spec.AddField(instruction.FieldOrder, field.TypeInt, value)
	}
	if iuo.mutation.RecipeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instruction.RecipeTable,
			Columns: []string{instruction.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instruction.RecipeTable,
			Columns: []string{instruction.RecipeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Instruction{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instruction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
