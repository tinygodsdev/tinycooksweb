// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/equipment"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/idea"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/ingredient"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/product"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/source"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/tag"
)

// RecipeCreate is the builder for creating a Recipe entity.
type RecipeCreate struct {
	config
	mutation *RecipeMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (rc *RecipeCreate) SetCreateTime(t time.Time) *RecipeCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableCreateTime(t *time.Time) *RecipeCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *RecipeCreate) SetUpdateTime(t time.Time) *RecipeCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableUpdateTime(t *time.Time) *RecipeCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetLocale sets the "locale" field.
func (rc *RecipeCreate) SetLocale(r recipe.Locale) *RecipeCreate {
	rc.mutation.SetLocale(r)
	return rc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableLocale(r *recipe.Locale) *RecipeCreate {
	if r != nil {
		rc.SetLocale(*r)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RecipeCreate) SetName(s string) *RecipeCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetSlug sets the "slug" field.
func (rc *RecipeCreate) SetSlug(s string) *RecipeCreate {
	rc.mutation.SetSlug(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RecipeCreate) SetDescription(s string) *RecipeCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetText sets the "text" field.
func (rc *RecipeCreate) SetText(s string) *RecipeCreate {
	rc.mutation.SetText(s)
	return rc
}

// SetServings sets the "servings" field.
func (rc *RecipeCreate) SetServings(i int) *RecipeCreate {
	rc.mutation.SetServings(i)
	return rc
}

// SetNillableServings sets the "servings" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableServings(i *int) *RecipeCreate {
	if i != nil {
		rc.SetServings(*i)
	}
	return rc
}

// SetTime sets the "time" field.
func (rc *RecipeCreate) SetTime(t time.Duration) *RecipeCreate {
	rc.mutation.SetTime(t)
	return rc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableTime(t *time.Duration) *RecipeCreate {
	if t != nil {
		rc.SetTime(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RecipeCreate) SetID(u uuid.UUID) *RecipeCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RecipeCreate) SetNillableID(u *uuid.UUID) *RecipeCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddRequiredProductIDs adds the "required_products" edge to the Product entity by IDs.
func (rc *RecipeCreate) AddRequiredProductIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddRequiredProductIDs(ids...)
	return rc
}

// AddRequiredProducts adds the "required_products" edges to the Product entity.
func (rc *RecipeCreate) AddRequiredProducts(p ...*Product) *RecipeCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddRequiredProductIDs(ids...)
}

// AddInstructionIDs adds the "instructions" edge to the Instruction entity by IDs.
func (rc *RecipeCreate) AddInstructionIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddInstructionIDs(ids...)
	return rc
}

// AddInstructions adds the "instructions" edges to the Instruction entity.
func (rc *RecipeCreate) AddInstructions(i ...*Instruction) *RecipeCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddInstructionIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (rc *RecipeCreate) AddTagIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddTagIDs(ids...)
	return rc
}

// AddTags adds the "tags" edges to the Tag entity.
func (rc *RecipeCreate) AddTags(t ...*Tag) *RecipeCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rc.AddTagIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (rc *RecipeCreate) AddEquipmentIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddEquipmentIDs(ids...)
	return rc
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (rc *RecipeCreate) AddEquipment(e ...*Equipment) *RecipeCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEquipmentIDs(ids...)
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (rc *RecipeCreate) AddIdeaIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddIdeaIDs(ids...)
	return rc
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (rc *RecipeCreate) AddIdeas(i ...*Idea) *RecipeCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIdeaIDs(ids...)
}

// AddSourceIDs adds the "sources" edge to the Source entity by IDs.
func (rc *RecipeCreate) AddSourceIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddSourceIDs(ids...)
	return rc
}

// AddSources adds the "sources" edges to the Source entity.
func (rc *RecipeCreate) AddSources(s ...*Source) *RecipeCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddSourceIDs(ids...)
}

// SetNutritionID sets the "nutrition" edge to the Nutrition entity by ID.
func (rc *RecipeCreate) SetNutritionID(id int) *RecipeCreate {
	rc.mutation.SetNutritionID(id)
	return rc
}

// SetNillableNutritionID sets the "nutrition" edge to the Nutrition entity by ID if the given value is not nil.
func (rc *RecipeCreate) SetNillableNutritionID(id *int) *RecipeCreate {
	if id != nil {
		rc = rc.SetNutritionID(*id)
	}
	return rc
}

// SetNutrition sets the "nutrition" edge to the Nutrition entity.
func (rc *RecipeCreate) SetNutrition(n *Nutrition) *RecipeCreate {
	return rc.SetNutritionID(n.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (rc *RecipeCreate) AddIngredientIDs(ids ...uuid.UUID) *RecipeCreate {
	rc.mutation.AddIngredientIDs(ids...)
	return rc
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (rc *RecipeCreate) AddIngredients(i ...*Ingredient) *RecipeCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIngredientIDs(ids...)
}

// Mutation returns the RecipeMutation object of the builder.
func (rc *RecipeCreate) Mutation() *RecipeMutation {
	return rc.mutation
}

// Save creates the Recipe in the database.
func (rc *RecipeCreate) Save(ctx context.Context) (*Recipe, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecipeCreate) SaveX(ctx context.Context) *Recipe {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecipeCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecipeCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecipeCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := recipe.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := recipe.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
	if _, ok := rc.mutation.Locale(); !ok {
		v := recipe.DefaultLocale
		rc.mutation.SetLocale(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := recipe.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecipeCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Recipe.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Recipe.update_time"`)}
	}
	if _, ok := rc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "Recipe.locale"`)}
	}
	if v, ok := rc.mutation.Locale(); ok {
		if err := recipe.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "Recipe.locale": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Recipe.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := recipe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Recipe.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Recipe.slug"`)}
	}
	if v, ok := rc.mutation.Slug(); ok {
		if err := recipe.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Recipe.slug": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Recipe.description"`)}
	}
	if _, ok := rc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Recipe.text"`)}
	}
	if v, ok := rc.mutation.Servings(); ok {
		if err := recipe.ServingsValidator(v); err != nil {
			return &ValidationError{Name: "servings", err: fmt.Errorf(`ent: validator failed for field "Recipe.servings": %w`, err)}
		}
	}
	return nil
}

func (rc *RecipeCreate) sqlSave(ctx context.Context) (*Recipe, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecipeCreate) createSpec() (*Recipe, *sqlgraph.CreateSpec) {
	var (
		_node = &Recipe{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(recipe.Table, sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(recipe.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(recipe.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.Locale(); ok {
		_spec.SetField(recipe.FieldLocale, field.TypeEnum, value)
		_node.Locale = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(recipe.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Slug(); ok {
		_spec.SetField(recipe.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(recipe.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.Text(); ok {
		_spec.SetField(recipe.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := rc.mutation.Servings(); ok {
		_spec.SetField(recipe.FieldServings, field.TypeInt, value)
		_node.Servings = &value
	}
	if value, ok := rc.mutation.Time(); ok {
		_spec.SetField(recipe.FieldTime, field.TypeInt64, value)
		_node.Time = &value
	}
	if nodes := rc.mutation.RequiredProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IngredientCreate{config: rc.config, mutation: newIngredientMutation(rc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.InstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.NutritionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   recipe.NutritionTable,
			Columns: []string{recipe.NutritionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecipeCreateBulk is the builder for creating many Recipe entities in bulk.
type RecipeCreateBulk struct {
	config
	err      error
	builders []*RecipeCreate
}

// Save creates the Recipe entities in the database.
func (rcb *RecipeCreateBulk) Save(ctx context.Context) ([]*Recipe, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Recipe, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecipeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecipeCreateBulk) SaveX(ctx context.Context) []*Recipe {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecipeCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecipeCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
