// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/equipment"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/idea"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/ingredient"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/product"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/source"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/tag"
)

// RecipeUpdate is the builder for updating Recipe entities.
type RecipeUpdate struct {
	config
	hooks    []Hook
	mutation *RecipeMutation
}

// Where appends a list predicates to the RecipeUpdate builder.
func (ru *RecipeUpdate) Where(ps ...predicate.Recipe) *RecipeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RecipeUpdate) SetUpdateTime(t time.Time) *RecipeUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetName sets the "name" field.
func (ru *RecipeUpdate) SetName(s string) *RecipeUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableName(s *string) *RecipeUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetSlug sets the "slug" field.
func (ru *RecipeUpdate) SetSlug(s string) *RecipeUpdate {
	ru.mutation.SetSlug(s)
	return ru
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableSlug(s *string) *RecipeUpdate {
	if s != nil {
		ru.SetSlug(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RecipeUpdate) SetDescription(s string) *RecipeUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableDescription(s *string) *RecipeUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// SetText sets the "text" field.
func (ru *RecipeUpdate) SetText(s string) *RecipeUpdate {
	ru.mutation.SetText(s)
	return ru
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableText(s *string) *RecipeUpdate {
	if s != nil {
		ru.SetText(*s)
	}
	return ru
}

// SetRating sets the "rating" field.
func (ru *RecipeUpdate) SetRating(f float32) *RecipeUpdate {
	ru.mutation.ResetRating()
	ru.mutation.SetRating(f)
	return ru
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableRating(f *float32) *RecipeUpdate {
	if f != nil {
		ru.SetRating(*f)
	}
	return ru
}

// AddRating adds f to the "rating" field.
func (ru *RecipeUpdate) AddRating(f float32) *RecipeUpdate {
	ru.mutation.AddRating(f)
	return ru
}

// ClearRating clears the value of the "rating" field.
func (ru *RecipeUpdate) ClearRating() *RecipeUpdate {
	ru.mutation.ClearRating()
	return ru
}

// SetServings sets the "servings" field.
func (ru *RecipeUpdate) SetServings(i int) *RecipeUpdate {
	ru.mutation.ResetServings()
	ru.mutation.SetServings(i)
	return ru
}

// SetNillableServings sets the "servings" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableServings(i *int) *RecipeUpdate {
	if i != nil {
		ru.SetServings(*i)
	}
	return ru
}

// AddServings adds i to the "servings" field.
func (ru *RecipeUpdate) AddServings(i int) *RecipeUpdate {
	ru.mutation.AddServings(i)
	return ru
}

// ClearServings clears the value of the "servings" field.
func (ru *RecipeUpdate) ClearServings() *RecipeUpdate {
	ru.mutation.ClearServings()
	return ru
}

// SetTime sets the "time" field.
func (ru *RecipeUpdate) SetTime(t time.Duration) *RecipeUpdate {
	ru.mutation.ResetTime()
	ru.mutation.SetTime(t)
	return ru
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableTime(t *time.Duration) *RecipeUpdate {
	if t != nil {
		ru.SetTime(*t)
	}
	return ru
}

// AddTime adds t to the "time" field.
func (ru *RecipeUpdate) AddTime(t time.Duration) *RecipeUpdate {
	ru.mutation.AddTime(t)
	return ru
}

// ClearTime clears the value of the "time" field.
func (ru *RecipeUpdate) ClearTime() *RecipeUpdate {
	ru.mutation.ClearTime()
	return ru
}

// SetPublished sets the "published" field.
func (ru *RecipeUpdate) SetPublished(b bool) *RecipeUpdate {
	ru.mutation.SetPublished(b)
	return ru
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillablePublished(b *bool) *RecipeUpdate {
	if b != nil {
		ru.SetPublished(*b)
	}
	return ru
}

// AddRequiredProductIDs adds the "required_products" edge to the Product entity by IDs.
func (ru *RecipeUpdate) AddRequiredProductIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddRequiredProductIDs(ids...)
	return ru
}

// AddRequiredProducts adds the "required_products" edges to the Product entity.
func (ru *RecipeUpdate) AddRequiredProducts(p ...*Product) *RecipeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddRequiredProductIDs(ids...)
}

// AddInstructionIDs adds the "instructions" edge to the Instruction entity by IDs.
func (ru *RecipeUpdate) AddInstructionIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddInstructionIDs(ids...)
	return ru
}

// AddInstructions adds the "instructions" edges to the Instruction entity.
func (ru *RecipeUpdate) AddInstructions(i ...*Instruction) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddInstructionIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ru *RecipeUpdate) AddTagIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddTagIDs(ids...)
	return ru
}

// AddTags adds the "tags" edges to the Tag entity.
func (ru *RecipeUpdate) AddTags(t ...*Tag) *RecipeUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTagIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (ru *RecipeUpdate) AddEquipmentIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddEquipmentIDs(ids...)
	return ru
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (ru *RecipeUpdate) AddEquipment(e ...*Equipment) *RecipeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEquipmentIDs(ids...)
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (ru *RecipeUpdate) AddIdeaIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddIdeaIDs(ids...)
	return ru
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (ru *RecipeUpdate) AddIdeas(i ...*Idea) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddIdeaIDs(ids...)
}

// AddSourceIDs adds the "sources" edge to the Source entity by IDs.
func (ru *RecipeUpdate) AddSourceIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddSourceIDs(ids...)
	return ru
}

// AddSources adds the "sources" edges to the Source entity.
func (ru *RecipeUpdate) AddSources(s ...*Source) *RecipeUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSourceIDs(ids...)
}

// SetNutritionID sets the "nutrition" edge to the Nutrition entity by ID.
func (ru *RecipeUpdate) SetNutritionID(id int) *RecipeUpdate {
	ru.mutation.SetNutritionID(id)
	return ru
}

// SetNillableNutritionID sets the "nutrition" edge to the Nutrition entity by ID if the given value is not nil.
func (ru *RecipeUpdate) SetNillableNutritionID(id *int) *RecipeUpdate {
	if id != nil {
		ru = ru.SetNutritionID(*id)
	}
	return ru
}

// SetNutrition sets the "nutrition" edge to the Nutrition entity.
func (ru *RecipeUpdate) SetNutrition(n *Nutrition) *RecipeUpdate {
	return ru.SetNutritionID(n.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (ru *RecipeUpdate) AddIngredientIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.AddIngredientIDs(ids...)
	return ru
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (ru *RecipeUpdate) AddIngredients(i ...*Ingredient) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddIngredientIDs(ids...)
}

// Mutation returns the RecipeMutation object of the builder.
func (ru *RecipeUpdate) Mutation() *RecipeMutation {
	return ru.mutation
}

// ClearRequiredProducts clears all "required_products" edges to the Product entity.
func (ru *RecipeUpdate) ClearRequiredProducts() *RecipeUpdate {
	ru.mutation.ClearRequiredProducts()
	return ru
}

// RemoveRequiredProductIDs removes the "required_products" edge to Product entities by IDs.
func (ru *RecipeUpdate) RemoveRequiredProductIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveRequiredProductIDs(ids...)
	return ru
}

// RemoveRequiredProducts removes "required_products" edges to Product entities.
func (ru *RecipeUpdate) RemoveRequiredProducts(p ...*Product) *RecipeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveRequiredProductIDs(ids...)
}

// ClearInstructions clears all "instructions" edges to the Instruction entity.
func (ru *RecipeUpdate) ClearInstructions() *RecipeUpdate {
	ru.mutation.ClearInstructions()
	return ru
}

// RemoveInstructionIDs removes the "instructions" edge to Instruction entities by IDs.
func (ru *RecipeUpdate) RemoveInstructionIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveInstructionIDs(ids...)
	return ru
}

// RemoveInstructions removes "instructions" edges to Instruction entities.
func (ru *RecipeUpdate) RemoveInstructions(i ...*Instruction) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveInstructionIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ru *RecipeUpdate) ClearTags() *RecipeUpdate {
	ru.mutation.ClearTags()
	return ru
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ru *RecipeUpdate) RemoveTagIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveTagIDs(ids...)
	return ru
}

// RemoveTags removes "tags" edges to Tag entities.
func (ru *RecipeUpdate) RemoveTags(t ...*Tag) *RecipeUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTagIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (ru *RecipeUpdate) ClearEquipment() *RecipeUpdate {
	ru.mutation.ClearEquipment()
	return ru
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (ru *RecipeUpdate) RemoveEquipmentIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveEquipmentIDs(ids...)
	return ru
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (ru *RecipeUpdate) RemoveEquipment(e ...*Equipment) *RecipeUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEquipmentIDs(ids...)
}

// ClearIdeas clears all "ideas" edges to the Idea entity.
func (ru *RecipeUpdate) ClearIdeas() *RecipeUpdate {
	ru.mutation.ClearIdeas()
	return ru
}

// RemoveIdeaIDs removes the "ideas" edge to Idea entities by IDs.
func (ru *RecipeUpdate) RemoveIdeaIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveIdeaIDs(ids...)
	return ru
}

// RemoveIdeas removes "ideas" edges to Idea entities.
func (ru *RecipeUpdate) RemoveIdeas(i ...*Idea) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveIdeaIDs(ids...)
}

// ClearSources clears all "sources" edges to the Source entity.
func (ru *RecipeUpdate) ClearSources() *RecipeUpdate {
	ru.mutation.ClearSources()
	return ru
}

// RemoveSourceIDs removes the "sources" edge to Source entities by IDs.
func (ru *RecipeUpdate) RemoveSourceIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveSourceIDs(ids...)
	return ru
}

// RemoveSources removes "sources" edges to Source entities.
func (ru *RecipeUpdate) RemoveSources(s ...*Source) *RecipeUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSourceIDs(ids...)
}

// ClearNutrition clears the "nutrition" edge to the Nutrition entity.
func (ru *RecipeUpdate) ClearNutrition() *RecipeUpdate {
	ru.mutation.ClearNutrition()
	return ru
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (ru *RecipeUpdate) ClearIngredients() *RecipeUpdate {
	ru.mutation.ClearIngredients()
	return ru
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (ru *RecipeUpdate) RemoveIngredientIDs(ids ...uuid.UUID) *RecipeUpdate {
	ru.mutation.RemoveIngredientIDs(ids...)
	return ru
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (ru *RecipeUpdate) RemoveIngredients(i ...*Ingredient) *RecipeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveIngredientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecipeUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecipeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecipeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecipeUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := recipe.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecipeUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := recipe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Recipe.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Slug(); ok {
		if err := recipe.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Recipe.slug": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Rating(); ok {
		if err := recipe.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Recipe.rating": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Servings(); ok {
		if err := recipe.ServingsValidator(v); err != nil {
			return &ValidationError{Name: "servings", err: fmt.Errorf(`ent: validator failed for field "Recipe.servings": %w`, err)}
		}
	}
	return nil
}

func (ru *RecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recipe.Table, recipe.Columns, sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(recipe.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(recipe.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Slug(); ok {
		_spec.SetField(recipe.FieldSlug, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(recipe.FieldDescription, field.TypeString, value)
	}
	if value, ok := ru.mutation.Text(); ok {
		_spec.SetField(recipe.FieldText, field.TypeString, value)
	}
	if value, ok := ru.mutation.Rating(); ok {
		_spec.SetField(recipe.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := ru.mutation.AddedRating(); ok {
		_spec.AddField(recipe.FieldRating, field.TypeFloat32, value)
	}
	if ru.mutation.RatingCleared() {
		_spec.ClearField(recipe.FieldRating, field.TypeFloat32)
	}
	if value, ok := ru.mutation.Servings(); ok {
		_spec.SetField(recipe.FieldServings, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedServings(); ok {
		_spec.AddField(recipe.FieldServings, field.TypeInt, value)
	}
	if ru.mutation.ServingsCleared() {
		_spec.ClearField(recipe.FieldServings, field.TypeInt)
	}
	if value, ok := ru.mutation.Time(); ok {
		_spec.SetField(recipe.FieldTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedTime(); ok {
		_spec.AddField(recipe.FieldTime, field.TypeInt64, value)
	}
	if ru.mutation.TimeCleared() {
		_spec.ClearField(recipe.FieldTime, field.TypeInt64)
	}
	if value, ok := ru.mutation.Published(); ok {
		_spec.SetField(recipe.FieldPublished, field.TypeBool, value)
	}
	if ru.mutation.RequiredProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		createE := &IngredientCreate{config: ru.config, mutation: newIngredientMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRequiredProductsIDs(); len(nodes) > 0 && !ru.mutation.RequiredProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IngredientCreate{config: ru.config, mutation: newIngredientMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RequiredProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IngredientCreate{config: ru.config, mutation: newIngredientMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.InstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedInstructionsIDs(); len(nodes) > 0 && !ru.mutation.InstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.InstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ru.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !ru.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedIdeasIDs(); len(nodes) > 0 && !ru.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSourcesIDs(); len(nodes) > 0 && !ru.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.NutritionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   recipe.NutritionTable,
			Columns: []string{recipe.NutritionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.NutritionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   recipe.NutritionTable,
			Columns: []string{recipe.NutritionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !ru.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RecipeUpdateOne is the builder for updating a single Recipe entity.
type RecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecipeMutation
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RecipeUpdateOne) SetUpdateTime(t time.Time) *RecipeUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RecipeUpdateOne) SetName(s string) *RecipeUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableName(s *string) *RecipeUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetSlug sets the "slug" field.
func (ruo *RecipeUpdateOne) SetSlug(s string) *RecipeUpdateOne {
	ruo.mutation.SetSlug(s)
	return ruo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableSlug(s *string) *RecipeUpdateOne {
	if s != nil {
		ruo.SetSlug(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RecipeUpdateOne) SetDescription(s string) *RecipeUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableDescription(s *string) *RecipeUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// SetText sets the "text" field.
func (ruo *RecipeUpdateOne) SetText(s string) *RecipeUpdateOne {
	ruo.mutation.SetText(s)
	return ruo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableText(s *string) *RecipeUpdateOne {
	if s != nil {
		ruo.SetText(*s)
	}
	return ruo
}

// SetRating sets the "rating" field.
func (ruo *RecipeUpdateOne) SetRating(f float32) *RecipeUpdateOne {
	ruo.mutation.ResetRating()
	ruo.mutation.SetRating(f)
	return ruo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableRating(f *float32) *RecipeUpdateOne {
	if f != nil {
		ruo.SetRating(*f)
	}
	return ruo
}

// AddRating adds f to the "rating" field.
func (ruo *RecipeUpdateOne) AddRating(f float32) *RecipeUpdateOne {
	ruo.mutation.AddRating(f)
	return ruo
}

// ClearRating clears the value of the "rating" field.
func (ruo *RecipeUpdateOne) ClearRating() *RecipeUpdateOne {
	ruo.mutation.ClearRating()
	return ruo
}

// SetServings sets the "servings" field.
func (ruo *RecipeUpdateOne) SetServings(i int) *RecipeUpdateOne {
	ruo.mutation.ResetServings()
	ruo.mutation.SetServings(i)
	return ruo
}

// SetNillableServings sets the "servings" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableServings(i *int) *RecipeUpdateOne {
	if i != nil {
		ruo.SetServings(*i)
	}
	return ruo
}

// AddServings adds i to the "servings" field.
func (ruo *RecipeUpdateOne) AddServings(i int) *RecipeUpdateOne {
	ruo.mutation.AddServings(i)
	return ruo
}

// ClearServings clears the value of the "servings" field.
func (ruo *RecipeUpdateOne) ClearServings() *RecipeUpdateOne {
	ruo.mutation.ClearServings()
	return ruo
}

// SetTime sets the "time" field.
func (ruo *RecipeUpdateOne) SetTime(t time.Duration) *RecipeUpdateOne {
	ruo.mutation.ResetTime()
	ruo.mutation.SetTime(t)
	return ruo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableTime(t *time.Duration) *RecipeUpdateOne {
	if t != nil {
		ruo.SetTime(*t)
	}
	return ruo
}

// AddTime adds t to the "time" field.
func (ruo *RecipeUpdateOne) AddTime(t time.Duration) *RecipeUpdateOne {
	ruo.mutation.AddTime(t)
	return ruo
}

// ClearTime clears the value of the "time" field.
func (ruo *RecipeUpdateOne) ClearTime() *RecipeUpdateOne {
	ruo.mutation.ClearTime()
	return ruo
}

// SetPublished sets the "published" field.
func (ruo *RecipeUpdateOne) SetPublished(b bool) *RecipeUpdateOne {
	ruo.mutation.SetPublished(b)
	return ruo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillablePublished(b *bool) *RecipeUpdateOne {
	if b != nil {
		ruo.SetPublished(*b)
	}
	return ruo
}

// AddRequiredProductIDs adds the "required_products" edge to the Product entity by IDs.
func (ruo *RecipeUpdateOne) AddRequiredProductIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddRequiredProductIDs(ids...)
	return ruo
}

// AddRequiredProducts adds the "required_products" edges to the Product entity.
func (ruo *RecipeUpdateOne) AddRequiredProducts(p ...*Product) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddRequiredProductIDs(ids...)
}

// AddInstructionIDs adds the "instructions" edge to the Instruction entity by IDs.
func (ruo *RecipeUpdateOne) AddInstructionIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddInstructionIDs(ids...)
	return ruo
}

// AddInstructions adds the "instructions" edges to the Instruction entity.
func (ruo *RecipeUpdateOne) AddInstructions(i ...*Instruction) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddInstructionIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ruo *RecipeUpdateOne) AddTagIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddTagIDs(ids...)
	return ruo
}

// AddTags adds the "tags" edges to the Tag entity.
func (ruo *RecipeUpdateOne) AddTags(t ...*Tag) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTagIDs(ids...)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (ruo *RecipeUpdateOne) AddEquipmentIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddEquipmentIDs(ids...)
	return ruo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (ruo *RecipeUpdateOne) AddEquipment(e ...*Equipment) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEquipmentIDs(ids...)
}

// AddIdeaIDs adds the "ideas" edge to the Idea entity by IDs.
func (ruo *RecipeUpdateOne) AddIdeaIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddIdeaIDs(ids...)
	return ruo
}

// AddIdeas adds the "ideas" edges to the Idea entity.
func (ruo *RecipeUpdateOne) AddIdeas(i ...*Idea) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddIdeaIDs(ids...)
}

// AddSourceIDs adds the "sources" edge to the Source entity by IDs.
func (ruo *RecipeUpdateOne) AddSourceIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddSourceIDs(ids...)
	return ruo
}

// AddSources adds the "sources" edges to the Source entity.
func (ruo *RecipeUpdateOne) AddSources(s ...*Source) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSourceIDs(ids...)
}

// SetNutritionID sets the "nutrition" edge to the Nutrition entity by ID.
func (ruo *RecipeUpdateOne) SetNutritionID(id int) *RecipeUpdateOne {
	ruo.mutation.SetNutritionID(id)
	return ruo
}

// SetNillableNutritionID sets the "nutrition" edge to the Nutrition entity by ID if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableNutritionID(id *int) *RecipeUpdateOne {
	if id != nil {
		ruo = ruo.SetNutritionID(*id)
	}
	return ruo
}

// SetNutrition sets the "nutrition" edge to the Nutrition entity.
func (ruo *RecipeUpdateOne) SetNutrition(n *Nutrition) *RecipeUpdateOne {
	return ruo.SetNutritionID(n.ID)
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (ruo *RecipeUpdateOne) AddIngredientIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.AddIngredientIDs(ids...)
	return ruo
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (ruo *RecipeUpdateOne) AddIngredients(i ...*Ingredient) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddIngredientIDs(ids...)
}

// Mutation returns the RecipeMutation object of the builder.
func (ruo *RecipeUpdateOne) Mutation() *RecipeMutation {
	return ruo.mutation
}

// ClearRequiredProducts clears all "required_products" edges to the Product entity.
func (ruo *RecipeUpdateOne) ClearRequiredProducts() *RecipeUpdateOne {
	ruo.mutation.ClearRequiredProducts()
	return ruo
}

// RemoveRequiredProductIDs removes the "required_products" edge to Product entities by IDs.
func (ruo *RecipeUpdateOne) RemoveRequiredProductIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveRequiredProductIDs(ids...)
	return ruo
}

// RemoveRequiredProducts removes "required_products" edges to Product entities.
func (ruo *RecipeUpdateOne) RemoveRequiredProducts(p ...*Product) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveRequiredProductIDs(ids...)
}

// ClearInstructions clears all "instructions" edges to the Instruction entity.
func (ruo *RecipeUpdateOne) ClearInstructions() *RecipeUpdateOne {
	ruo.mutation.ClearInstructions()
	return ruo
}

// RemoveInstructionIDs removes the "instructions" edge to Instruction entities by IDs.
func (ruo *RecipeUpdateOne) RemoveInstructionIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveInstructionIDs(ids...)
	return ruo
}

// RemoveInstructions removes "instructions" edges to Instruction entities.
func (ruo *RecipeUpdateOne) RemoveInstructions(i ...*Instruction) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveInstructionIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (ruo *RecipeUpdateOne) ClearTags() *RecipeUpdateOne {
	ruo.mutation.ClearTags()
	return ruo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (ruo *RecipeUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveTagIDs(ids...)
	return ruo
}

// RemoveTags removes "tags" edges to Tag entities.
func (ruo *RecipeUpdateOne) RemoveTags(t ...*Tag) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTagIDs(ids...)
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (ruo *RecipeUpdateOne) ClearEquipment() *RecipeUpdateOne {
	ruo.mutation.ClearEquipment()
	return ruo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (ruo *RecipeUpdateOne) RemoveEquipmentIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveEquipmentIDs(ids...)
	return ruo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (ruo *RecipeUpdateOne) RemoveEquipment(e ...*Equipment) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEquipmentIDs(ids...)
}

// ClearIdeas clears all "ideas" edges to the Idea entity.
func (ruo *RecipeUpdateOne) ClearIdeas() *RecipeUpdateOne {
	ruo.mutation.ClearIdeas()
	return ruo
}

// RemoveIdeaIDs removes the "ideas" edge to Idea entities by IDs.
func (ruo *RecipeUpdateOne) RemoveIdeaIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveIdeaIDs(ids...)
	return ruo
}

// RemoveIdeas removes "ideas" edges to Idea entities.
func (ruo *RecipeUpdateOne) RemoveIdeas(i ...*Idea) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveIdeaIDs(ids...)
}

// ClearSources clears all "sources" edges to the Source entity.
func (ruo *RecipeUpdateOne) ClearSources() *RecipeUpdateOne {
	ruo.mutation.ClearSources()
	return ruo
}

// RemoveSourceIDs removes the "sources" edge to Source entities by IDs.
func (ruo *RecipeUpdateOne) RemoveSourceIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveSourceIDs(ids...)
	return ruo
}

// RemoveSources removes "sources" edges to Source entities.
func (ruo *RecipeUpdateOne) RemoveSources(s ...*Source) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSourceIDs(ids...)
}

// ClearNutrition clears the "nutrition" edge to the Nutrition entity.
func (ruo *RecipeUpdateOne) ClearNutrition() *RecipeUpdateOne {
	ruo.mutation.ClearNutrition()
	return ruo
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (ruo *RecipeUpdateOne) ClearIngredients() *RecipeUpdateOne {
	ruo.mutation.ClearIngredients()
	return ruo
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (ruo *RecipeUpdateOne) RemoveIngredientIDs(ids ...uuid.UUID) *RecipeUpdateOne {
	ruo.mutation.RemoveIngredientIDs(ids...)
	return ruo
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (ruo *RecipeUpdateOne) RemoveIngredients(i ...*Ingredient) *RecipeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveIngredientIDs(ids...)
}

// Where appends a list predicates to the RecipeUpdate builder.
func (ruo *RecipeUpdateOne) Where(ps ...predicate.Recipe) *RecipeUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecipeUpdateOne) Select(field string, fields ...string) *RecipeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recipe entity.
func (ruo *RecipeUpdateOne) Save(ctx context.Context) (*Recipe, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecipeUpdateOne) SaveX(ctx context.Context) *Recipe {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecipeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecipeUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := recipe.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecipeUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := recipe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Recipe.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Slug(); ok {
		if err := recipe.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Recipe.slug": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Rating(); ok {
		if err := recipe.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Recipe.rating": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Servings(); ok {
		if err := recipe.ServingsValidator(v); err != nil {
			return &ValidationError{Name: "servings", err: fmt.Errorf(`ent: validator failed for field "Recipe.servings": %w`, err)}
		}
	}
	return nil
}

func (ruo *RecipeUpdateOne) sqlSave(ctx context.Context) (_node *Recipe, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recipe.Table, recipe.Columns, sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Recipe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipe.FieldID)
		for _, f := range fields {
			if !recipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(recipe.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(recipe.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Slug(); ok {
		_spec.SetField(recipe.FieldSlug, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(recipe.FieldDescription, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Text(); ok {
		_spec.SetField(recipe.FieldText, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Rating(); ok {
		_spec.SetField(recipe.FieldRating, field.TypeFloat32, value)
	}
	if value, ok := ruo.mutation.AddedRating(); ok {
		_spec.AddField(recipe.FieldRating, field.TypeFloat32, value)
	}
	if ruo.mutation.RatingCleared() {
		_spec.ClearField(recipe.FieldRating, field.TypeFloat32)
	}
	if value, ok := ruo.mutation.Servings(); ok {
		_spec.SetField(recipe.FieldServings, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedServings(); ok {
		_spec.AddField(recipe.FieldServings, field.TypeInt, value)
	}
	if ruo.mutation.ServingsCleared() {
		_spec.ClearField(recipe.FieldServings, field.TypeInt)
	}
	if value, ok := ruo.mutation.Time(); ok {
		_spec.SetField(recipe.FieldTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedTime(); ok {
		_spec.AddField(recipe.FieldTime, field.TypeInt64, value)
	}
	if ruo.mutation.TimeCleared() {
		_spec.ClearField(recipe.FieldTime, field.TypeInt64)
	}
	if value, ok := ruo.mutation.Published(); ok {
		_spec.SetField(recipe.FieldPublished, field.TypeBool, value)
	}
	if ruo.mutation.RequiredProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		createE := &IngredientCreate{config: ruo.config, mutation: newIngredientMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRequiredProductsIDs(); len(nodes) > 0 && !ruo.mutation.RequiredProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IngredientCreate{config: ruo.config, mutation: newIngredientMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RequiredProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.RequiredProductsTable,
			Columns: recipe.RequiredProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &IngredientCreate{config: ruo.config, mutation: newIngredientMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.InstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedInstructionsIDs(); len(nodes) > 0 && !ruo.mutation.InstructionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.InstructionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.InstructionsTable,
			Columns: []string{recipe.InstructionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instruction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ruo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.TagsTable,
			Columns: recipe.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !ruo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.EquipmentTable,
			Columns: recipe.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedIdeasIDs(); len(nodes) > 0 && !ruo.mutation.IdeasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IdeasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.IdeasTable,
			Columns: []string{recipe.IdeasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idea.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSourcesIDs(); len(nodes) > 0 && !ruo.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recipe.SourcesTable,
			Columns: []string{recipe.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.NutritionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   recipe.NutritionTable,
			Columns: []string{recipe.NutritionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.NutritionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   recipe.NutritionTable,
			Columns: []string{recipe.NutritionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nutrition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !ruo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   recipe.IngredientsTable,
			Columns: []string{recipe.IngredientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingredient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Recipe{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
