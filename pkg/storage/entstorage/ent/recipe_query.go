// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/equipment"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/idea"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/ingredient"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/instruction"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/nutrition"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/predicate"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/product"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/recipe"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/source"
	"github.com/tinygodsdev/tinycooksweb/pkg/storage/entstorage/ent/tag"
)

// RecipeQuery is the builder for querying Recipe entities.
type RecipeQuery struct {
	config
	ctx                  *QueryContext
	order                []recipe.OrderOption
	inters               []Interceptor
	predicates           []predicate.Recipe
	withRequiredProducts *ProductQuery
	withInstructions     *InstructionQuery
	withTags             *TagQuery
	withEquipment        *EquipmentQuery
	withIdeas            *IdeaQuery
	withSources          *SourceQuery
	withNutrition        *NutritionQuery
	withIngredients      *IngredientQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecipeQuery builder.
func (rq *RecipeQuery) Where(ps ...predicate.Recipe) *RecipeQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RecipeQuery) Limit(limit int) *RecipeQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *RecipeQuery) Offset(offset int) *RecipeQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RecipeQuery) Unique(unique bool) *RecipeQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RecipeQuery) Order(o ...recipe.OrderOption) *RecipeQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryRequiredProducts chains the current query on the "required_products" edge.
func (rq *RecipeQuery) QueryRequiredProducts() *ProductQuery {
	query := (&ProductClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, recipe.RequiredProductsTable, recipe.RequiredProductsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstructions chains the current query on the "instructions" edge.
func (rq *RecipeQuery) QueryInstructions() *InstructionQuery {
	query := (&InstructionClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(instruction.Table, instruction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.InstructionsTable, recipe.InstructionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (rq *RecipeQuery) QueryTags() *TagQuery {
	query := (&TagClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, recipe.TagsTable, recipe.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEquipment chains the current query on the "equipment" edge.
func (rq *RecipeQuery) QueryEquipment() *EquipmentQuery {
	query := (&EquipmentClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, recipe.EquipmentTable, recipe.EquipmentPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIdeas chains the current query on the "ideas" edge.
func (rq *RecipeQuery) QueryIdeas() *IdeaQuery {
	query := (&IdeaClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(idea.Table, idea.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.IdeasTable, recipe.IdeasColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySources chains the current query on the "sources" edge.
func (rq *RecipeQuery) QuerySources() *SourceQuery {
	query := (&SourceClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(source.Table, source.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.SourcesTable, recipe.SourcesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNutrition chains the current query on the "nutrition" edge.
func (rq *RecipeQuery) QueryNutrition() *NutritionQuery {
	query := (&NutritionClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(nutrition.Table, nutrition.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, recipe.NutritionTable, recipe.NutritionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIngredients chains the current query on the "ingredients" edge.
func (rq *RecipeQuery) QueryIngredients() *IngredientQuery {
	query := (&IngredientClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, selector),
			sqlgraph.To(ingredient.Table, ingredient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, recipe.IngredientsTable, recipe.IngredientsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Recipe entity from the query.
// Returns a *NotFoundError when no Recipe was found.
func (rq *RecipeQuery) First(ctx context.Context) (*Recipe, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recipe.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RecipeQuery) FirstX(ctx context.Context) *Recipe {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Recipe ID from the query.
// Returns a *NotFoundError when no Recipe ID was found.
func (rq *RecipeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recipe.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RecipeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Recipe entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Recipe entity is found.
// Returns a *NotFoundError when no Recipe entities are found.
func (rq *RecipeQuery) Only(ctx context.Context) (*Recipe, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recipe.Label}
	default:
		return nil, &NotSingularError{recipe.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RecipeQuery) OnlyX(ctx context.Context) *Recipe {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Recipe ID in the query.
// Returns a *NotSingularError when more than one Recipe ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RecipeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recipe.Label}
	default:
		err = &NotSingularError{recipe.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RecipeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Recipes.
func (rq *RecipeQuery) All(ctx context.Context) ([]*Recipe, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryAll)
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Recipe, *RecipeQuery]()
	return withInterceptors[[]*Recipe](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RecipeQuery) AllX(ctx context.Context) []*Recipe {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Recipe IDs.
func (rq *RecipeQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if rq.ctx.Unique == nil && rq.path != nil {
		rq.Unique(true)
	}
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryIDs)
	if err = rq.Select(recipe.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RecipeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RecipeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryCount)
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RecipeQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RecipeQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RecipeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, ent.OpQueryExist)
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RecipeQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecipeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RecipeQuery) Clone() *RecipeQuery {
	if rq == nil {
		return nil
	}
	return &RecipeQuery{
		config:               rq.config,
		ctx:                  rq.ctx.Clone(),
		order:                append([]recipe.OrderOption{}, rq.order...),
		inters:               append([]Interceptor{}, rq.inters...),
		predicates:           append([]predicate.Recipe{}, rq.predicates...),
		withRequiredProducts: rq.withRequiredProducts.Clone(),
		withInstructions:     rq.withInstructions.Clone(),
		withTags:             rq.withTags.Clone(),
		withEquipment:        rq.withEquipment.Clone(),
		withIdeas:            rq.withIdeas.Clone(),
		withSources:          rq.withSources.Clone(),
		withNutrition:        rq.withNutrition.Clone(),
		withIngredients:      rq.withIngredients.Clone(),
		// clone intermediate query.
		sql:  rq.sql.Clone(),
		path: rq.path,
	}
}

// WithRequiredProducts tells the query-builder to eager-load the nodes that are connected to
// the "required_products" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithRequiredProducts(opts ...func(*ProductQuery)) *RecipeQuery {
	query := (&ProductClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withRequiredProducts = query
	return rq
}

// WithInstructions tells the query-builder to eager-load the nodes that are connected to
// the "instructions" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithInstructions(opts ...func(*InstructionQuery)) *RecipeQuery {
	query := (&InstructionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withInstructions = query
	return rq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithTags(opts ...func(*TagQuery)) *RecipeQuery {
	query := (&TagClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withTags = query
	return rq
}

// WithEquipment tells the query-builder to eager-load the nodes that are connected to
// the "equipment" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithEquipment(opts ...func(*EquipmentQuery)) *RecipeQuery {
	query := (&EquipmentClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withEquipment = query
	return rq
}

// WithIdeas tells the query-builder to eager-load the nodes that are connected to
// the "ideas" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithIdeas(opts ...func(*IdeaQuery)) *RecipeQuery {
	query := (&IdeaClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withIdeas = query
	return rq
}

// WithSources tells the query-builder to eager-load the nodes that are connected to
// the "sources" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithSources(opts ...func(*SourceQuery)) *RecipeQuery {
	query := (&SourceClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withSources = query
	return rq
}

// WithNutrition tells the query-builder to eager-load the nodes that are connected to
// the "nutrition" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithNutrition(opts ...func(*NutritionQuery)) *RecipeQuery {
	query := (&NutritionClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withNutrition = query
	return rq
}

// WithIngredients tells the query-builder to eager-load the nodes that are connected to
// the "ingredients" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RecipeQuery) WithIngredients(opts ...func(*IngredientQuery)) *RecipeQuery {
	query := (&IngredientClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withIngredients = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Recipe.Query().
//		GroupBy(recipe.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rq *RecipeQuery) GroupBy(field string, fields ...string) *RecipeGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RecipeGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = recipe.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Recipe.Query().
//		Select(recipe.FieldCreateTime).
//		Scan(ctx, &v)
func (rq *RecipeQuery) Select(fields ...string) *RecipeSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &RecipeSelect{RecipeQuery: rq}
	sbuild.label = recipe.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RecipeSelect configured with the given aggregations.
func (rq *RecipeQuery) Aggregate(fns ...AggregateFunc) *RecipeSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RecipeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !recipe.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *RecipeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Recipe, error) {
	var (
		nodes       = []*Recipe{}
		_spec       = rq.querySpec()
		loadedTypes = [8]bool{
			rq.withRequiredProducts != nil,
			rq.withInstructions != nil,
			rq.withTags != nil,
			rq.withEquipment != nil,
			rq.withIdeas != nil,
			rq.withSources != nil,
			rq.withNutrition != nil,
			rq.withIngredients != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Recipe).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Recipe{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withRequiredProducts; query != nil {
		if err := rq.loadRequiredProducts(ctx, query, nodes,
			func(n *Recipe) { n.Edges.RequiredProducts = []*Product{} },
			func(n *Recipe, e *Product) { n.Edges.RequiredProducts = append(n.Edges.RequiredProducts, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withInstructions; query != nil {
		if err := rq.loadInstructions(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Instructions = []*Instruction{} },
			func(n *Recipe, e *Instruction) { n.Edges.Instructions = append(n.Edges.Instructions, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withTags; query != nil {
		if err := rq.loadTags(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Tags = []*Tag{} },
			func(n *Recipe, e *Tag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withEquipment; query != nil {
		if err := rq.loadEquipment(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Equipment = []*Equipment{} },
			func(n *Recipe, e *Equipment) { n.Edges.Equipment = append(n.Edges.Equipment, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withIdeas; query != nil {
		if err := rq.loadIdeas(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Ideas = []*Idea{} },
			func(n *Recipe, e *Idea) { n.Edges.Ideas = append(n.Edges.Ideas, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withSources; query != nil {
		if err := rq.loadSources(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Sources = []*Source{} },
			func(n *Recipe, e *Source) { n.Edges.Sources = append(n.Edges.Sources, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withNutrition; query != nil {
		if err := rq.loadNutrition(ctx, query, nodes, nil,
			func(n *Recipe, e *Nutrition) { n.Edges.Nutrition = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withIngredients; query != nil {
		if err := rq.loadIngredients(ctx, query, nodes,
			func(n *Recipe) { n.Edges.Ingredients = []*Ingredient{} },
			func(n *Recipe, e *Ingredient) { n.Edges.Ingredients = append(n.Edges.Ingredients, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RecipeQuery) loadRequiredProducts(ctx context.Context, query *ProductQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Product)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Recipe)
	nids := make(map[uuid.UUID]map[*Recipe]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(recipe.RequiredProductsTable)
		s.Join(joinT).On(s.C(product.FieldID), joinT.C(recipe.RequiredProductsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(recipe.RequiredProductsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(recipe.RequiredProductsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Recipe]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Product](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "required_products" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RecipeQuery) loadInstructions(ctx context.Context, query *InstructionQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Instruction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Recipe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Instruction(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipe.InstructionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.recipe_instructions
		if fk == nil {
			return fmt.Errorf(`foreign-key "recipe_instructions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_instructions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RecipeQuery) loadTags(ctx context.Context, query *TagQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Recipe)
	nids := make(map[uuid.UUID]map[*Recipe]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(recipe.TagsTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(recipe.TagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(recipe.TagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(recipe.TagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Recipe]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RecipeQuery) loadEquipment(ctx context.Context, query *EquipmentQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Equipment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*Recipe)
	nids := make(map[uuid.UUID]map[*Recipe]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(recipe.EquipmentTable)
		s.Join(joinT).On(s.C(equipment.FieldID), joinT.C(recipe.EquipmentPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(recipe.EquipmentPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(recipe.EquipmentPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Recipe]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Equipment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "equipment" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rq *RecipeQuery) loadIdeas(ctx context.Context, query *IdeaQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Idea)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Recipe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Idea(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipe.IdeasColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.recipe_ideas
		if fk == nil {
			return fmt.Errorf(`foreign-key "recipe_ideas" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_ideas" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RecipeQuery) loadSources(ctx context.Context, query *SourceQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Source)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Recipe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Source(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipe.SourcesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.recipe_sources
		if fk == nil {
			return fmt.Errorf(`foreign-key "recipe_sources" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_sources" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RecipeQuery) loadNutrition(ctx context.Context, query *NutritionQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Nutrition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Recipe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Nutrition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipe.NutritionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.recipe_nutrition
		if fk == nil {
			return fmt.Errorf(`foreign-key "recipe_nutrition" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_nutrition" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RecipeQuery) loadIngredients(ctx context.Context, query *IngredientQuery, nodes []*Recipe, init func(*Recipe), assign func(*Recipe, *Ingredient)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Recipe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(ingredient.FieldRecipeID)
	}
	query.Where(predicate.Ingredient(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(recipe.IngredientsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RecipeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "recipe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rq *RecipeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	_spec.Node.Columns = rq.ctx.Fields
	if len(rq.ctx.Fields) > 0 {
		_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RecipeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(recipe.Table, recipe.Columns, sqlgraph.NewFieldSpec(recipe.FieldID, field.TypeUUID))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipe.FieldID)
		for i := range fields {
			if fields[i] != recipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RecipeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(recipe.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = recipe.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecipeGroupBy is the group-by builder for Recipe entities.
type RecipeGroupBy struct {
	selector
	build *RecipeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RecipeGroupBy) Aggregate(fns ...AggregateFunc) *RecipeGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RecipeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, ent.OpQueryGroupBy)
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeQuery, *RecipeGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RecipeGroupBy) sqlScan(ctx context.Context, root *RecipeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RecipeSelect is the builder for selecting fields of Recipe entities.
type RecipeSelect struct {
	*RecipeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RecipeSelect) Aggregate(fns ...AggregateFunc) *RecipeSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RecipeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, ent.OpQuerySelect)
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RecipeQuery, *RecipeSelect](ctx, rs.RecipeQuery, rs, rs.inters, v)
}

func (rs *RecipeSelect) sqlScan(ctx context.Context, root *RecipeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
